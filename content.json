{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"changfeng","url":"https://killgc.github.io/shortfeng"},"pages":[],"posts":[{"title":"Java-Map","slug":"Java-Map","date":"2018-07-02T16:32:48.000Z","updated":"2018-07-02T17:13:33.000Z","comments":true,"path":"2018/07/03/Java-Map/","link":"","permalink":"https://killgc.github.io/shortfeng/2018/07/03/Java-Map/","excerpt":"","text":"Map一、LinkedHashMap通过维护一个运行于所有条目的双向链表，LinkedHashMap保证了元素迭代的顺序。该迭代顺序可以是插入顺序或者是访问顺序 HashMap + LinkedList，以LinkedList维护插入或访问的顺序，默认都采用插入顺序来维持取出键值对的次序 1、特点： 非线程安全 Key和Value都允许空 有序 2、底层结构 LinkedHashMap只定义了两个属性: 123456789101112131415/** * The head of the doubly linked list. * 双向链表的头节点 */ private transient Entry&lt;K,V&gt; header;/** * The iteration ordering method for this linked hash map: true * for access-order, false for insertion-order. * true表示最近最少使用次序，false表示插入顺序 */ private final boolean accessOrder; Entry的属性： 1234567891011121、K key2、V value3、Entry&lt;K, V&gt; next4、int hash5、Entry&lt;K, V&gt; before6、Entry&lt;K, V&gt; after 注意该循环双向链表的头部存放的是最久访问的节点或最先插入的节点，尾部为最近访问的或最近插入的节点，迭代器遍历方向是从链表的头部开始到链表尾部结束，在链表尾部有一个空的header节点，该节点不存放key-value内容，为LinkedHashMap类的成员属性，循环双向链表的入口 12345678910111213141516171819public LinkedHashMap(int initialCapacity, float loadFactor, boolean accessOrder) &#123; super(initialCapacity, loadFactor); this.accessOrder = accessOrder;&#125;accessOrder，它表示：（1）false，所有的Entry按照插入的顺序排列（2）true，所有的Entry按照访问的顺序排列\"访问\"，这个词有两层意思：1、根据Key拿到Value，也就是get方法2、修改Key对应的Value，也就是put方法 3、读取 1234567891011121314151617181920212223242526272829303132333435363738394041424344/** * 通过key获取value，与HashMap的区别是：当LinkedHashMap按访问顺序排序的时候，会将访问的当前节点移到链表尾部(头结点的前一个节点) */public V get(Object key) &#123; // 调用父类HashMap的getEntry()方法，取得要查找的元素。 Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;)getEntry(key); if (e == null) return null; // 记录访问顺序。 e.recordAccess(this); return e.value;&#125;/** * 在HashMap的put和get方法中，会调用该方法，在HashMap中该方法为空 * 在LinkedHashMap中，当按访问顺序排序时，该方法会将当前节点插入到链表尾部(头结点的前一个节点)，否则不做任何事 */void recordAccess(HashMap&lt;K,V&gt; m) &#123; LinkedHashMap&lt;K,V&gt; lm = (LinkedHashMap&lt;K,V&gt;)m; //当LinkedHashMap按访问排序时 if (lm.accessOrder) &#123; lm.modCount++; //移除当前节点 remove(); //将当前节点插入到头结点前面 addBefore(lm.header); &#125;&#125;/** * 移除节点，并修改前后引用 */private void remove() &#123; before.after = after; after.before = before;&#125;private void addBefore(Entry&lt;K,V&gt; existingEntry) &#123; after = existingEntry; before = existingEntry.before; before.after = this; after.before = this;&#125; 4、put 1234567891011121314151617181920public V put(K key, V value) &#123; if (key == null) return putForNullKey(value); int hash = hash(key.hashCode()); int i = indexFor(hash, table.length); for (Entry&lt;K,V&gt; e = table[i]; e != null; e = e.next) &#123; Object k; if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123; V oldValue = e.value; e.value = value; e.recordAccess(this); return oldValue; &#125; &#125; modCount++; addEntry(hash, key, value, i); return null;&#125;","categories":[],"tags":[]},{"title":"spring cloud","slug":"spring-cloud","date":"2018-07-01T13:34:56.000Z","updated":"2018-07-01T13:45:15.000Z","comments":true,"path":"2018/07/01/spring-cloud/","link":"","permalink":"https://killgc.github.io/shortfeng/2018/07/01/spring-cloud/","excerpt":"","text":"spring cloud一、Eureka Netflix 注册中心Eureka [juˈri:kə] 二、Hystrix Netflix 熔断器Hystrix [hɪst’rɪks] 三、Zuul Netflix api网关四、Consul HashiCorp五、Ribbon Netflix 负载均衡Ribbon [ˈrɪbən]","categories":[],"tags":[]},{"title":"git命令","slug":"git命令","date":"2018-07-01T12:27:12.000Z","updated":"2018-07-02T11:42:33.000Z","comments":true,"path":"2018/07/01/git命令/","link":"","permalink":"https://killgc.github.io/shortfeng/2018/07/01/git命令/","excerpt":"","text":"git命令1、推送本地新建的分支 git push –set-upstream origin hotfix/corpname_changfeng_20180629D 2、sourceTree和idea 拉取和提交代码反复提示输入用户名和密码 在命令终端执行以下命令解决git config –global credential.helper store","categories":[],"tags":[]},{"title":"mysql优化","slug":"mysql优化","date":"2018-06-27T07:11:35.000Z","updated":"2018-06-27T07:37:43.000Z","comments":true,"path":"2018/06/27/mysql优化/","link":"","permalink":"https://killgc.github.io/shortfeng/2018/06/27/mysql优化/","excerpt":"","text":"mysql优化 1、为查询缓存优化你的查询 // 查询缓存不开启$r = mysql_query(“SELECT username FROM user WHERE signup_date &gt;= CURDATE()”); // 开启查询缓存$today = date(“Y-m-d”);$r = mysql_query(“SELECT username FROM user WHERE signup_date &gt;= ‘$today’”); 2、当只要一行数据时使用 LIMIT 1 3、在Join表的时候使用相当类型的列，并将其索引 如果你的应用程序有很多 JOIN 查询，你应该确认两个表中Join的字段是被建过索引的 4、使用 ENUM 而不是 VARCHAR ENUM 类型是非常快和紧凑的。在实际上，其保存的是 TINYINT，但其外表上显示为字符串 5、尽可能的使用 NOT NULL 6、把IP地址存成 UNSIGNED INT 你可以使用 INET_ATON() 来把一个字符串IP转成一个整形，并使用 INET_NTOA() 把一个整形转成一个字符串IP 7、拆分大的 DELETE 或 INSERT 语句 如果你需要在一个在线的网站上去执行一个大的 DELETE 或 INSERT 查询，你需要非常小心，要避免你的操作让你的整个网站停止相应。因为这两个操作是会锁表的，表一锁住了，别的操作都进不来了。 8、分页limit太大，导致查询慢 limit10000,20的意思扫描满足条件的10020行，扔掉前面的10000行，返回最后的20行 123456日常分页SQL语句select id,name,content from users order by id asc limit 100000,20扫描100020行如果记录了上次的最大IDselect id,name,content from users where id&gt;100073 order by id asc limit 20扫描20行。 12345678优化前： select * from wl_tagindex where byname=&apos;f&apos; order by id limit 300000,10 执行时间是 3.21s优化后：select * from ( select id from wl_tagindex where byname=&apos;f&apos; order by id limit 300000,10) aleft join wl_tagindex b on a.id=b.id","categories":[],"tags":[]},{"title":"java性能优化","slug":"java性能优化","date":"2018-06-25T03:08:00.000Z","updated":"2018-06-25T06:10:58.000Z","comments":true,"path":"2018/06/25/java性能优化/","link":"","permalink":"https://killgc.github.io/shortfeng/2018/06/25/java性能优化/","excerpt":"","text":"java性能优化 1、随机访问使用for循环，顺序访问使用Iterator或foreach实现RandomAccess接口的类实例比如ArrayList，假如是随机访问的，使用普通for循环效率将高于使用foreach循环；反过来，如果是顺序访问的，则使用Iterator会效率更高 foreach循环的底层实现原理就是迭代器Iterator 2、循环内不要不断创建对象引用 例如： 1234for (int i = 1; i &lt;= count; i++)&#123; Object obj = new Object(); &#125; 这种做法会导致内存中有count份Object对象引用存在，count很大的话，就耗费内存了，建议为改为： 12345Object obj = null;for (int i = 0; i &lt;= count; i++)&#123; obj = new Object();&#125; 这样的话，内存中只有一份Object对象引用，每次new Object()的时候，Object对象引用指向不同的Object罢了，但是内存中只有一份，这样就大大节省了内存空间了 3、尽量减少对变量的重复计算 明确一个概念，对方法的调用，即使方法中只有一句语句，也是有消耗的，包括创建栈帧、调用方法时保护现场、调用方法完毕时恢复现场等。所以例如下面的操作： 1234567for (int i = 0; i &lt; list.size(); i++)&#123;...&#125;建议替换为：for (int i = 0, length = list.size(); i &lt; length; i++)&#123;...&#125;这样，在list.size()很大的时候，就减少了很多的消耗 4、如果能估计到待添加的内容长度，为底层以数组方式实现的集合、工具类指定初始长度 比如ArrayList、LinkedLlist、StringBuilder、StringBuffer、HashMap、HashSet等等 5、把一个基本数据类型转为字符串，基本数据类型.toString()是最快的方式、String.valueOf(数据)次之、数据+””最慢 （1）、String.valueOf()方法底层调用了Integer.toString()方法，但是会在调用前做空判断 （2）、Integer.toString()方法就不说了，直接调用了 （3）、i + “”底层使用了StringBuilder实现，先用append方法拼接，再用toString()方法获取字符串 三者对比下来，明显是2最快、1次之、3最慢 6、对资源的close()建议分开操作 12345678910111213141516171819202122232425262728try&#123; XXX.close(); YYY.close();&#125;catch (Exception e)&#123; ...&#125;建议修改为：try&#123; XXX.close();&#125;catch (Exception e)&#123; ...&#125;try&#123; YYY.close();&#125;catch (Exception e)&#123; ...&#125; 7、对于ThreadLocal使用前或者使用后一定要先remove 当前基本所有的项目都使用了线程池技术，这非常好，可以动态配置线程数、可以重用线程。 然而，如果你在项目中使用到了ThreadLocal，一定要记得使用前或者使用后remove一下。这是因为上面提到了线程池技术做的是一个线程重用，这意味着代码运行过程中，一条线程使用完毕，并不会被销毁而是等待下一次的使用。我们看一下Thread类中，持有ThreadLocal.ThreadLocalMap的引用： 123/* ThreadLocal values pertaining to this thread. This map is maintained by the ThreadLocal class. */ThreadLocal.ThreadLocalMap threadLocals = null;线程不销毁意味着上条线程set的ThreadLocal.ThreadLocalMap中的数据依然存在，那么在下一条线程重用这个Thread的时候，很可能get到的是上条线程set的数据而不是自己想要的内容。 这个问题非常隐晦，一旦出现这个原因导致的错误，没有相关经验或者没有扎实的基础非常难发现这个问题，因此在写代码的时候就要注意这一点，这将给你后续减少很多的工作量。","categories":[],"tags":[]},{"title":"Comparable接口、Comparator接口","slug":"Comparable接口与Comparator","date":"2018-06-22T09:36:17.000Z","updated":"2018-06-22T09:38:01.000Z","comments":true,"path":"2018/06/22/Comparable接口与Comparator/","link":"","permalink":"https://killgc.github.io/shortfeng/2018/06/22/Comparable接口与Comparator/","excerpt":"","text":"Comparable接口、Comparator接口 1、元素自身具备比较性 元素自身具备比较性，需要元素实现Comparable接口，重写compareTo方法，也就是让元素自身具备比较性，这种方式叫做元素的自然排序也叫做默认排序 2、容器具备比较性 当元素自身不具备比较性，或者自身具备的比较性不是所需要的。那么此时可以让容器自身具备。需要定义一个类实现接口Comparator，重写compare方法，并将该接口的子类实例对象作为参数传递给TreeMap集合的构造方法。 注意：当Comparable比较方式和Comparator比较方式同时存在时，以Comparator的比较方式为主；","categories":[],"tags":[]},{"title":"跨域问题","slug":"跨域问题","date":"2018-04-04T02:48:32.000Z","updated":"2018-04-04T15:01:36.000Z","comments":true,"path":"2018/04/04/跨域问题/","link":"","permalink":"https://killgc.github.io/shortfeng/2018/04/04/跨域问题/","excerpt":"","text":"跨域问题 同源同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据 同源是指以下三个信息都必须相同： 协议相同 域名相同 端口相同 如果非同源，共有三种行为受到限制： Cookie、LocalStorage 和 IndexDB 无法读取 DOM 无法获得 AJAX 请求不能发送 虽然这些限制是必要的，但是有时很不方便，合理的用途也受到影响。如何规避上面三种限制 设置document.domain这种方案只适用Cookie与iframe A网页是http://w1.example.com/a.html，B网页是http://w2.example.com/b.html，那么只要设置相同的document.domain，两个网页就可以共享Cookie 1document.domain = 'example.com'; Cookie 是服务器写入浏览器的一小段信息，只有同源的网页才能共享。但是，两个网页一级域名相同，只是二级域名不同，浏览器允许通过设置document.domain共享 Cookie 如果两个网页不同源，就无法拿到对方的DOM。典型的例子是iframe窗口和window.open方法打开的窗口，它们与父窗口无法通信 完全不同源 window.name window.postMessage：HTML5为了解决这个问题，引入了一个全新的API：跨文档通信 API（Cross-document messaging）。这个API为window对象新增了一个window.postMessage方法，允许跨窗口通信，不论这两个窗口是否同源 AJAX： JSONP ： 简单适用，老式浏览器全部支持，服务器改造非常小;网页通过添加一个script元素，向服务器请求JSON数据，这种做法不受同源政策限制；服务器收到请求后，将数据放在一个指定名字的回调函数里传回来 WebSocket：WebSocket是一种通信协议，使用ws://（非加密）和wss://（加密）作为协议前缀。该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信 CORS：跨源资源分享（Cross-Origin Resource Sharing）的缩写。它是W3C标准，是跨源AJAX请求的根本解决方法。相比JSONP只能发GET请求，CORS允许任何类型的请求 JSONP例子: 1234567891011121314function addScriptTag(src) &#123; var script = document.createElement('script'); script.setAttribute(\"type\",\"text/javascript\"); script.src = src; document.body.appendChild(script);&#125;window.onload = function () &#123; addScriptTag('http://example.com/ip?callback=foo');&#125;function foo(data) &#123; console.log('Your public IP address is: ' + data.ip);&#125;; X-Frame-Optionsnginx中设置X-Frame-Options ，防止网站被别人用iframe嵌入使用 X-Frame-Options 响应头 X-Frame-Options HTTP 响应头是用来给浏览器指示允许一个页面可否在 iframe 或者 object标签中展现的标记。网站可以使用此功能，来确保自己网站的内容没有被嵌到别人的网站中去，也从而避免了点击劫持 (clickjacking) 的攻击。 X-Frame-Options 有三个值: DENY表示该页面不允许在 frame 中展示，即便是在相同域名的页面中嵌套也不允许。 SAMEORIGIN表示该页面可以在相同域名页面的 frame 中展示。 ALLOW-FROM uri表示该页面可以在指定来源的 frame 中展示。换一句话说，如果设置为 DENY，不光在别人的网站 frame 嵌入时会无法加载，在同域名页面中同样会无法加载。另一方面，如果设置为 SAMEORIGIN，那么页面就可以在同域名页面的 frame 中嵌套。","categories":[],"tags":[]},{"title":"支付","slug":"支付","date":"2018-04-03T16:03:00.000Z","updated":"2018-04-03T16:36:19.000Z","comments":true,"path":"2018/04/04/支付/","link":"","permalink":"https://killgc.github.io/shortfeng/2018/04/04/支付/","excerpt":"","text":"支付系统的思考 支付系统特点： 写多读少，读写分离方案效果不明显 事务强一致性，事务ACID，强调Consistency（一致性）和Availability（可用性），数据库一般用关系数据库。 防重提交策略 乐观锁：通过唯一索引锁住记录（行级锁），UPDATE tab1 SET col1=1,version=version+1 WHERE id=#id# and version=#version# 悲观锁：select * from table_xxx where id=’xxx’ for update，id字段一定是主键或者唯一索引，不然是锁表，悲观锁使用时一般伴随事务一起使用，数据锁定时间可能会很长，根据实际情况选用 防重表：唯一索引导致插入失败 分布式锁：redis分布式锁 Token：分为两步，第一步申请Token，第二步拿申请到Token发起请求。可以设置Token过期时间 支付缓冲：把支付请求快速接下来，后续再启异步任务处理，可以过滤掉重复的支付订单。优点是高吞吐；缺点是不能及时返回处理结果，后续需要监听支付结果的异步返回 状态机：如果状态机已经处于下一个状态，这时候来了一个上一个状态的变更，理论上是不能够变更的","categories":[],"tags":[]},{"title":"redis","slug":"redis","date":"2018-04-01T11:58:26.000Z","updated":"2018-04-01T13:05:09.000Z","comments":true,"path":"2018/04/01/redis/","link":"","permalink":"https://killgc.github.io/shortfeng/2018/04/01/redis/","excerpt":"","text":"Redis Redis持久化 RDB持久化：在指定的时间间隔内生成数据集的时间点快照 AOF持久化：记录服务器执行的所有写操作命令，并在服务器启动时，通过重新执行这些命令来还原数据集。 AOF 文件中的命令全部以 Redis 协议的格式来保存，新命令会被追加到文件的末尾 RDB优点： 适合用于备份 适用于灾难恢复 父进程在保存RDB文件时唯一要做的就是fork出一个子进程，然后这个子进程就会处理接下来的所有保存工作，父进程无须执行任何磁盘I/O操作 RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快 缺点： 如果你需要尽量避免在服务器故障时丢失数据，那么 RDB 不适合你。 虽然 Redis 允许你设置不同的保存点（save point）来控制保存 RDB 文件的频率， 但是， 因为RDB 文件需要保存整个数据集的状态， 所以它并不是一个轻松的操作。 因此你可能会至少 5 分钟才保存一次 RDB 文件。 在这种情况下， 一旦发生故障停机， 你就可能会丢失好几分钟的数据 每次保存 RDB 的时候，Redis 都要 fork() 出一个子进程，并由子进程来进行实际的持久化工作。 在数据集比较庞大时， fork() 可能会非常耗时，造成服务器在某某毫秒内停止处理客户端； 如果数据集非常巨大，并且 CPU 时间非常紧张的话，那么这种停止时间甚至可能会长达整整一秒。 虽然 AOF 重写也需要进行 fork() ，但无论 AOF 重写的执行间隔有多长，数据的耐久性都不会有任何损失 AOFappend-only file，AOF 优点： 使用 AOF 持久化会让 Redis 变得非常耐久，AOF 的默认策略为每秒钟 fsync 一次 redis-check-aof 工具也可以轻易地修复因为某些原因而包含了未写入完整的命令 Redis 可以在 AOF 文件体积变得过大时，自动地在后台对 AOF 进行重写，整个重写操作是绝对安全的 AOF 文件有序地保存了对数据库执行的所有写入操作，容易被人读懂 缺点： 对于相同的数据集来说，AOF 文件的体积通常要大于 RDB 文件的体积 根据所使用的 fsync 策略，AOF 的速度可能会慢于 RDB 修改配置文件来打开 AOF 功能：appendonly yes 配置 Redis 多久才将数据 fsync 到磁盘一次。有三个选项： 每次有新命令追加到 AOF 文件时就执行一次 fsync ：非常慢，也非常安全。 每秒 fsync 一次：足够快（和使用 RDB 持久化差不多），并且在故障时只会丢失 1 秒钟的数据。 从不 fsync ：将数据交给操作系统来处理。更快，也更不安全的选择。推荐（并且也是默认）的措施为每秒 fsync 一次， 这种 fsync 策略可以兼顾速度和安全性","categories":[],"tags":[]},{"title":"分布式事务","slug":"分布式事务","date":"2018-03-30T15:40:48.000Z","updated":"2018-04-01T11:49:33.000Z","comments":true,"path":"2018/03/30/分布式事务/","link":"","permalink":"https://killgc.github.io/shortfeng/2018/03/30/分布式事务/","excerpt":"","text":"分布式事务 事务补偿机制：事务链中的任何一个正向事务操作，都必须存在一个完全符合回滚规则的可逆事务，补偿过程作为一个服务调用过程同样存在调用不成功的情况，这个时候需要通过重试的机制来保证补偿的成功率。当然这也就要求补偿操作本身具备幂等性 柔性事务：分布式事务适用柔性事务 刚性事务：本地事务采用刚性事务 幂等性：不具有幂等性的操作，需要存储操作的执行结果，当执行操作的时候，查询是否已执行过，如果执行过直接返回上一次执行的结果，否则执行操作 重试策略如果只是一味的失败就立即重试会给工作服务造成不必要的压力，我们要根据服务执行失败的原因来选择不同的重试策略 重试操作一般会指定重试次数上线，如果重试次数达到了上限就不再进行重试了。这个时候应该通过一种手段通知相关人员进行处理。 对于等待重试的策略如果重试时仍然错误，可逐渐增加等待的时间，直到达到一个上限后，以上限作为等待时间。 如果某个时刻聚集了大量需要重试的操作，补偿框架需要控制请求的流量，以防止对工作服务造成过大的压力 如果失败的原因不是暂时性的，由于业务因素导致（如业务要素检查失败）的业务错误，这类错误是不会重发就能自动恢复的，那么应该立即终止重试 如果错误的原因是一些罕见的异常，比如因为网络传输过程出现数据丢失或者错误，应该立即再次重试，因为类似的错误一般很少会再次发生 如果错误的原因是系统繁忙（比如http协议返回的500或者另外约定的返回码）或者超时，这个时候需要等待一些时间再重试。 分布式事务实现方案： 两阶段提交(2PC) TCC(Try-Confirm-Cancel) 异步确保型 最大努力通知型 两阶段提交TCC适用场景： 严格一致性 执行时间较短 实时性要求高 异步确保型消息可靠、消息重复消费适用场景： 执行周期较长 实时性要求不高 最大努力通知型","categories":[],"tags":[]},{"title":"Dubbo","slug":"Dubbo","date":"2018-03-27T15:00:36.000Z","updated":"2018-03-29T15:30:32.000Z","comments":true,"path":"2018/03/27/Dubbo/","link":"","permalink":"https://killgc.github.io/shortfeng/2018/03/27/Dubbo/","excerpt":"","text":"dubbo 循环依赖问题1、check属性 默认check=true：dubbo缺省会在启动时检查依赖的服务是否可用（是否有提供者），不可用时会抛出异常，阻止Spring初始化完成，以便上线时，能及早发现问题 check=false：关闭检查依赖的服务是否可用 以下场景需关闭检查： 出现循环依赖，必须有一方先启动时；或者测试时，有些服务不关心；Spring容器是懒加载或者通过API编程延迟引用服务 123456789101112131415161718192021222324关闭某个服务的启动检查：&lt;dubbo:referenceinterface=\"com.foo.BarService\"check=\"false\"/&gt;关闭所有服务的启动时检查：&lt;dubbo:consumercheck=\"false\"/&gt;关闭注册中心启动时检查：(注册订阅失败时报错)&lt;dubbo:registrycheck=\"false\"/&gt;java -D参数：dubbo.reference.com.foo.BarService.check=falsedubbo.reference.check=falsedubbo.consumer.check=falsedubbo.registry.check=falsedubbo.properties配置：dubbo.reference.com.foo.BarService.check=falsedubbo.reference.check=falsedubbo.consumer.check=falsedubbo.registry.check=false 区别： dubbo.reference.check=false，强制改变所有reference的check值，就算配置中有声明，也会被覆盖。 dubbo.consumer.check=false，是设置check的缺省值，如果配置中有显式的声明，如：，不会受影响。 dubbo.registry.check=false，前面两个都是指订阅成功，但提供者列表是否为空是否报错，如果注册订阅失败时，也允许启动，需使用此选项，将在后台定时重试。 2、init属性 如果需要饥饿加载，即没有人引用也立即生成动态代理，可用配置： 12&lt;dubbo:reference interface=\"com.foo.BarService\" init=\"true\"/&gt; 集群容错集群调用失败时，dubbo提供了多种容错方案，默认为failover重试 各节点关系： 这里的Invoker是Provider的一个可调用Service的抽象，Invoker封装了Provider地址及Service接口信息。 Directory代表多个Invoker，可以把它看成List，但与List不同的是，它的值可能是动态变化的，比如注册中心推送变更。 Cluster将Directory中的多个Invoker伪装成一个Invoker，对上层透明，伪装过程包含了容错逻辑，调用失败后，重试另一个。 Router负责从多个Invoker中按路由规则选出子集，比如读写分离，应用隔离等。 LoadBalance负责从多个Invoker中选出具体的一个用于本次调用，选的过程包含了负载均衡算法，调用失败后，需要重选。 集群容错模式： Failover Cluster：失败自动切换，当出现失败，重试其它服务器。(缺省)，通常用于读操作，但重试会带来更长延迟。可通过retries=”2”来设置重试次数(不含第一次)。 Failfast Cluster：快速失败，只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录。 Failsafe Cluster：失败安全，出现异常时，直接忽略。通常用于写入审计日志等操作。 Failback Cluster：失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。 Forking Cluster：并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。可通过forks=”2”来设置最大并行数。 Broadcast Cluster：广播调用所有提供者，逐个调用，任意一台报错则报错。(2.1.0开始支持)，通常用于通知所有提供者更新缓存或日志等本地资源信息。 1234567891011121314151617181920重试次数配置（failover集群模式生效）：&lt;dubbo:serviceretries=\"2\"/&gt;&lt;dubbo:referenceretries=\"2\"/&gt;&lt;dubbo:reference&gt;&lt;dubbo:methodname=\"findFoo\"retries=\"2\"/&gt;&lt;/dubbo:reference&gt;集群模式配置：&lt;dubbo:servicecluster=\"failsafe\"/&gt;&lt;dubbo:referencecluster=\"failsafe\"/&gt; 负载均衡在集群负载均衡时，Dubbo提供了多种均衡策略，缺省为random随机调用。 Random LoadBalance：随机，按权重设置随机概率。在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。 RoundRobin LoadBalance轮循，按公约后的权重设置轮循比率。存在慢的提供者累积请求问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。 LeastActive LoadBalance最少活跃调用数，相同活跃数的随机，活跃数指调用前后计数差。使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大。 ConsistentHash LoadBalance一致性Hash，相同参数的请求总是发到同一提供者。当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。 1234缺省只对第一个参数Hash，如果要修改，请配置&lt;dubbo:parameter key=\"hash.arguments\" value=\"0,1\" /&gt;缺省用160份虚拟节点，如果要修改，请配置&lt;dubbo:parameter key=\"hash.nodes\" value=\"320\" /&gt; 1234567891011121314151617&lt;dubbo:service interface=\"...\" loadbalance=\"roundrobin\"/&gt;&lt;dubbo:referenceinterface=\"...\"loadbalance=\"roundrobin\"/&gt;&lt;dubbo:serviceinterface=\"...\"&gt;&lt;dubbo:service interface=\"...\"&gt; &lt;dubbo:method name=\"...\" loadbalance=\"roundrobin\"/&gt;&lt;/dubbo:service&gt;&lt;dubbo:reference interface=\"...\"&gt;&lt;dubbo:method name=\"...\" loadbalance=\"roundrobin\"/&gt;&lt;/dubbo:reference&gt; 线程模型 如果事件处理的逻辑能迅速完成，并且不会发起新的IO请求，比如只是在内存中记个标识，则直接在IO线程上处理更快，因为减少了线程池调度。 但如果事件处理逻辑较慢，或者需要发起新的IO请求，比如需要查询数据库，则必须派发到线程池，否则IO线程阻塞，将导致不能接收其它请求。 如果用IO线程处理事件，又在事件处理过程中发起新的IO请求，比如在连接事件中发起登录请求，会报“可能引发死锁”异常，但不会真死锁。 Dispatcher all 所有消息都派发到线程池，包括请求，响应，连接事件，断开事件，心跳等。 direct 所有消息都不派发到线程池，全部在IO线程上直接执行。 message 只有请求响应消息派发到线程池，其它连接断开事件，心跳等消息，直接在IO线程上执行。 execution 只请求消息派发到线程池，不含响应，响应和其它连接断开事件，心跳等消息，直接在IO线程上执行。 connection 在IO线程上，将连接断开事件放入队列，有序逐个执行，其它消息派发到线程池。 ThreadPool fixed 固定大小线程池，启动时建立线程，不关闭，一直持有。(缺省) cached 缓存线程池，空闲一分钟自动删除，需要时重建。 limited 可伸缩线程池，但池中的线程数只会增长不会收缩。(为避免收缩时突然来了大流量引起的性能问题)。 1234&lt;dubbo:protocol name=\"dubbo\"dispatcher=\"all\"threadpool=\"fixed\"threads=\"100\"/&gt; 直连提供者在开发及测试环境下，经常需要绕过注册中心，只测试指定服务提供者，这时候可能需要点对点直连，点对点直联方式，将以服务接口为单位，忽略注册中心的提供者列表 12345678910111213141516171819配置url指向提供者，将绕过注册中心，多个地址用分号隔开&lt;dubbo:referenceid=\"xxxService\"interface=\"com.alibaba.xxx.XxxService\"url=\"dubbo://localhost:20890\"/&gt;在JVM启动参数中加入-D参数映射服务地址，此配置优先级最高java -Dcom.alibaba.xxx.XxxService=dubbo://localhost:20890 如果服务比较多，也可以用文件映射 用-Ddubbo.resolve.file指定映射文件路径， 此配置优先级高于&lt;dubbo:reference&gt;中的配置 如： java -Ddubbo.resolve.file=xxx.properties 然后在映射文件xxx.properties中加入： com.alibaba.xxx.XxxService=dubbo://localhost:20890 注意为了避免复杂化线上环境，不要在线上使用这个功能，只应在测试阶段使用 只订阅问题为方便开发测试，经常会在线下共用一个所有服务可用的注册中心，这时，如果一个正在开发中的服务提供者注册，可能会影响消费者不能正常运行。 解决方案可以让服务提供者开发方，只订阅服务(开发的服务可能依赖其它服务)，而不注册正在开发的服务，通过直连测试正在开发的服务。 123456789禁用注册配置：&lt;dubbo:registryaddress=\"10.20.153.10:9090\"register=\"false\"/&gt;或者&lt;dubbo:registryaddress=\"10.20.153.10:9090?register=false\"/&gt; 只注册问题如果有两个镜像环境，两个注册中心，有一个服务只在其中一个注册中心有部署，另一个注册中心还没来得及部署，而两个注册中心的其它应用都需要依赖此服务，所以需要将服务同时注册到两个注册中心，但却不能让此服务同时依赖两个注册中心的其它服务。 解决方案可以让服务提供者方，只注册服务到另一注册中心，而不从另一注册中心订阅服务 1234567891011121314151617181920&lt;dubbo:registryid=\"hzRegistry\"address=\"10.20.153.10:9090\"/&gt;&lt;dubbo:registryid=\"qdRegistry\"address=\"10.20.141.150:9090\"subscribe=\"false\"/&gt;或者&lt;dubbo:registryid=\"hzRegistry\"address=\"10.20.153.10:9090\"/&gt;&lt;dubbo:registryid=\"qdRegistry\"address=\"10.20.141.150:9090?subscribe=false\"/&gt; 静态服务有时候希望人工管理服务提供者的上线和下线，此时需将注册中心标识为非动态管理模式 服务提供者初次注册时为禁用状态，需人工启用，断线时，将不会被自动删除，需人工禁用 123456789&lt;dubbo:registryaddress=\"10.20.141.150:9090\"dynamic=\"false\"/&gt;或者&lt;dubbo:registryaddress=\"10.20.141.150:9090?dynamic=false\"/&gt; 多协议(1) 不同服务不同协议 不同服务在性能上适用不同协议进行传输，比如大数据用短连接协议，小数据大并发用长连接协议 123456789101112131415161718192021&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:dubbo=\"http://code.alibabatech.com/schema/dubbo\" xsi:schemaLocation=\"http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsdhttp://code.alibabatech.com/schema/dubbohttp://code.alibabatech.com/schema/dubbo/dubbo.xsd\"&gt; &lt;dubbo:application name=\"world\" /&gt; &lt;dubbo:registry id=\"registry\" address=\"10.20.141.150:9090\" username=\"admin\" password=\"hello1234\" /&gt; &lt;!-- 多协议配置 --&gt; &lt;dubbo:protocol name=\"dubbo\" port=\"20880\" /&gt; &lt;dubbo:protocol name=\"rmi\" port=\"1099\" /&gt; &lt;!-- 使用dubbo协议暴露服务 --&gt; &lt;dubbo:service interface=\"com.alibaba.hello.api.HelloService\" version=\"1.0.0\" ref=\"helloService\" protocol=\"dubbo\" /&gt; &lt;!-- 使用rmi协议暴露服务 --&gt; &lt;dubbo:service interface=\"com.alibaba.hello.api.DemoService\" version=\"1.0.0\" ref=\"demoService\" protocol=\"rmi\" /&gt; &lt;/beans&gt; (2) 多协议暴露服务 consumer.xml 12345678910111213141516171819&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:dubbo=\"http://code.alibabatech.com/schema/dubbo\" xsi:schemaLocation=\"http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsdhttp://code.alibabatech.com/schema/dubbohttp://code.alibabatech.com/schema/dubbo/dubbo.xsd\"&gt;&lt;dubbo:application name=\"world\" /&gt; &lt;dubbo:registry id=\"registry\" address=\"10.20.141.150:9090\" username=\"admin\" password=\"hello1234\" /&gt; &lt;!-- 多协议配置 --&gt; &lt;dubbo:protocol name=\"dubbo\" port=\"20880\" /&gt; &lt;dubbo:protocol name=\"hessian\" port=\"8080\" /&gt; &lt;!-- 使用多个协议暴露服务 --&gt; &lt;dubbo:service id=\"helloService\" interface=\"com.alibaba.hello.api.HelloService\" version=\"1.0.0\" protocol=\"dubbo,hessian\" /&gt; &lt;/beans&gt; 多注册中心(1) 多注册中心注册 比如：中文站有些服务来不及在青岛部署，只在杭州部署，而青岛的其它应用需要引用此服务，就可以将服务同时注册到两个注册中心。 consumer.xml 123456789101112131415161718&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:dubbo=\"http://code.alibabatech.com/schema/dubbo\" xsi:schemaLocation=\"http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsdhttp://code.alibabatech.com/schema/dubbohttp://code.alibabatech.com/schema/dubbo/dubbo.xsd\"&gt;&lt;dubbo:application name=\"world\" /&gt; &lt;!-- 多注册中心配置 --&gt; &lt;dubbo:registry id=\"hangzhouRegistry\" address=\"10.20.141.150:9090\" /&gt; &lt;dubbo:registry id=\"qingdaoRegistry\" address=\"10.20.141.151:9010\" default=\"false\" /&gt; &lt;!-- 向多个注册中心注册 --&gt; &lt;dubbo:service interface=\"com.alibaba.hello.api.HelloService\" version=\"1.0.0\" ref=\"helloService\" registry=\"hangzhouRegistry,qingdaoRegistry\" /&gt; &lt;/beans&gt; (2) 不同服务使用不同注册中心 比如：CRM有些服务是专门为国际站设计的，有些服务是专门为中文站设计的。 1234567891011121314151617181920&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:dubbo=\"http://code.alibabatech.com/schema/dubbo\" xsi:schemaLocation=\"http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsdhttp://code.alibabatech.com/schema/dubbohttp://code.alibabatech.com/schema/dubbo/dubbo.xsd\"&gt; &lt;dubbo:application name=\"world\" /&gt; &lt;!-- 多注册中心配置 --&gt; &lt;dubbo:registry id=\"chinaRegistry\" address=\"10.20.141.150:9090\" /&gt; &lt;dubbo:registry id=\"intlRegistry\" address=\"10.20.154.177:9010\" default=\"false\" /&gt; &lt;!-- 向中文站注册中心注册 --&gt; &lt;dubbo:service interface=\"com.alibaba.hello.api.HelloService\" version=\"1.0.0\" ref=\"helloService\" registry=\"chinaRegistry\" /&gt; &lt;!-- 向国际站注册中心注册 --&gt; &lt;dubbo:service interface=\"com.alibaba.hello.api.DemoService\" version=\"1.0.0\" ref=\"demoService\" registry=\"intlRegistry\" /&gt; &lt;/beans&gt; (3) 多注册中心引用 比如：CRM需同时调用中文站和国际站的PC2服务，PC2在中文站和国际站均有部署，接口及版本号都一样，但连的数据库不一样。 12345678910111213141516171819202122&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:dubbo=\"http://code.alibabatech.com/schema/dubbo\" xsi:schemaLocation=\"http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsdhttp://code.alibabatech.com/schema/dubbohttp://code.alibabatech.com/schema/dubbo/dubbo.xsd\"&gt;&lt;dubbo:application name=\"world\" /&gt; &lt;!-- 多注册中心配置 --&gt; &lt;dubbo:registry id=\"chinaRegistry\" address=\"10.20.141.150:9090\" /&gt; &lt;dubbo:registry id=\"intlRegistry\" address=\"10.20.154.177:9010\" default=\"false\" /&gt; &lt;!-- 引用中文站服务 --&gt; &lt;dubbo:reference id=\"chinaHelloService\" interface=\"com.alibaba.hello.api.HelloService\" version=\"1.0.0\" registry=\"chinaRegistry\" /&gt; &lt;!-- 引用国际站站服务 --&gt; &lt;dubbo:reference id=\"intlHelloService\" interface=\"com.alibaba.hello.api.HelloService\" version=\"1.0.0\" registry=\"intlRegistry\" /&gt; &lt;/beans&gt; 如果只是测试环境临时需要连接两个不同注册中心，使用竖号分隔多个不同注册中心地址： 12345678910111213141516171819&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:dubbo=\"http://code.alibabatech.com/schema/dubbo\" xsi:schemaLocation=\"http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsdhttp://code.alibabatech.com/schema/dubbohttp://code.alibabatech.com/schema/dubbo/dubbo.xsd\"&gt; &lt;dubbo:application name=\"world\" /&gt; &lt;!-- 多注册中心配置，竖号分隔表示同时连接多个不同注册中心，同一注册中心的多个集群地址用逗号分隔 --&gt; &lt;dubbo:registry address=\"10.20.141.150:9090|10.20.154.177:9010\" /&gt; &lt;!-- 引用服务 --&gt; &lt;dubbo:reference id=\"helloService\" interface=\"com.alibaba.hello.api.HelloService\" version=\"1.0.0\" /&gt; &lt;/beans&gt; 服务分组当一个接口有多种实现时，可以用group区分。 12345678910111213141516171819202122&lt;dubbo:servicegroup=\"feedback\"interface=\"com.xxx.IndexService\"/&gt;&lt;dubbo:servicegroup=\"member\"interface=\"com.xxx.IndexService\"/&gt;&lt;dubbo:referenceid=\"feedbackIndexService\"group=\"feedback\"interface=\"com.xxx.IndexService\"/&gt;&lt;dubbo:referenceid=\"memberIndexService\"group=\"member\"interface=\"com.xxx.IndexService\"/&gt; 多版本当一个接口实现，出现不兼容升级时，可以用版本号过渡，版本号不同的服务相互间不引用。 在低压力时间段，先升级一半提供者为新版本再将所有消费者升级为新版本然后将剩下的一半提供者升级为新版本 12345678910111213141516171819202122232425262728&lt;dubbo:serviceinterface=\"com.foo.BarService\"version=\"1.0.0\"/&gt;&lt;dubbo:serviceinterface=\"com.foo.BarService\"version=\"2.0.0\"/&gt;&lt;dubbo:referenceid=\"barService\"interface=\"com.foo.BarService\"version=\"1.0.0\"/&gt;&lt;dubbo:referenceid=\"barService\"interface=\"com.foo.BarService\"version=\"2.0.0\"/&gt;不区分版本&lt;dubbo:referenceid=\"barService\"interface=\"com.foo.BarService\"version=\"*\"/&gt; 分组聚合按组合并返回结果，比如菜单服务，接口一样，但有多种实现，用group区分，现在消费方需从每种group中调用一次返回结果，合并结果返回，这样就可以实现聚合菜单项。 从2.1.0版本开始支持 1234567891011121314151617181920212223242526272829303132333435搜索所有分组：&lt;dubbo:referenceinterface=\"com.xxx.MenuService\"group=\"*\"merger=\"true\"/&gt;合并指定分组：&lt;dubbo:referenceinterface=\"com.xxx.MenuService\"group=\"aaa,bbb\"merger=\"true\"/&gt;指定方法合并结果，其它未指定的方法，将只调用一个Group：&lt;dubbo:referenceinterface=\"com.xxx.MenuService\"group=\"*\"&gt; &lt;dubbo:method name=\"getMenuItems\" merger=\"true\" /&gt;&lt;/dubbo:service&gt;某个方法不合并结果，其它都合并结果：&lt;dubbo:referenceinterface=\"com.xxx.MenuService\"group=\"*\"merger=\"true\"&gt; &lt;dubbo:method name=\"getMenuItems\" merger=\"false\" /&gt;&lt;/dubbo:service&gt; 参数验证参数验证功能是基于JSR303实现的，用户只需标识JSR303标准的验证Annotation，并通过声明filter来实现验证。 2.1.0以上版本支持 完整示例代码参见：https://github.com/alibaba/dubbo/tree/master/dubbo-test/dubbo-test-examples/src/main/java/com/alibaba/dubbo/examples/validation 验证方式可扩展，参见：Validation扩展点","categories":[],"tags":[]},{"title":"ConcurrentHashMap","slug":"ConcurrentHashMap","date":"2018-03-22T14:56:26.000Z","updated":"2018-03-25T14:58:41.000Z","comments":true,"path":"2018/03/22/ConcurrentHashMap/","link":"","permalink":"https://killgc.github.io/shortfeng/2018/03/22/ConcurrentHashMap/","excerpt":"","text":"ConcurrentHashMap HashMap为非线程安全的，多线程并发下put操作有可能引起死循环，而HashTable、Collections.synchronizedMap(hashMap)是线程安全的。 JDK6实现 使用锁分段实现多个线程间并发写操作，采用数组+链表结构的存储结构 包含两个静态内部类Segment和HashEntry Segment继承ReentrantLock，用来充当锁的角色，每个Segment对象守护一个散列映射表的若干桶，每个段实质是一个小的HashMap 每个桶是由若干个HashEntry对象链接起来的链表 不允许null作为映射值 定位： 假设ConcurrentHashMap一共分为2^n个段，每个段中有2^m个桶，那么段的定位方式是将key的hash值的高n位与(2^n-1)相与。在定位到某个段后，再将key的hash值的低m位与(2^m-1)相与，定位到具体的桶位 内部结构： 1、HashEntry HashEntry的next属性为final，所有新节点只能在链表的表头插入 12345678910111213static final class HashEntry&lt;K,V&gt; &#123; final K key; // 声明 key 为 final 型 final int hash; // 声明 hash 值为 final 型 volatile V value; // 声明 value 为 volatile 型 final HashEntry&lt;K,V&gt; next; // 声明 next 为 final 型 HashEntry(K key, int hash, HashEntry&lt;K,V&gt; next, V value) &#123; this.key = key; this.hash = hash; this.next = next; this.value = value; &#125; &#125; 2、Segment 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657static final class Segment&lt;K,V&gt; extends ReentrantLock implements Serializable &#123; /** * 在本 segment 范围内，包含的 HashEntry 元素的个数 * 该变量被声明为 volatile 型 */ transient volatile int count; /** * table 被更新的次数 */ transient int modCount; /** * 当 table 中包含的 HashEntry 元素的个数超过本变量值时，触发 table 的再散列 */ transient int threshold; /** * table 是由 HashEntry 对象组成的数组 * 如果散列时发生碰撞，碰撞的 HashEntry 对象就以链表的形式链接成一个链表 * table 数组的数组成员代表散列映射表的一个桶 * 每个 table 守护整个 ConcurrentHashMap 包含桶总数的一部分 * 如果并发级别为 16，table 则守护 ConcurrentHashMap 包含的桶总数的 1/16 */ transient volatile HashEntry&lt;K,V&gt;[] table; /** * 装载因子 */ final float loadFactor; Segment(int initialCapacity, float lf) &#123; loadFactor = lf; setTable(HashEntry.&lt;K,V&gt;newArray(initialCapacity)); &#125; /** * 设置 table 引用到这个新生成的 HashEntry 数组 * 只能在持有锁或构造函数中调用本方法 */ void setTable(HashEntry&lt;K,V&gt;[] newTable) &#123; // 计算临界阀值为新数组的长度与装载因子的乘积 threshold = (int)(newTable.length * loadFactor); table = newTable; &#125; /** * 根据 key 的散列值，找到 table 中对应的那个桶（table 数组的某个数组成员） */ HashEntry&lt;K,V&gt; getFirst(int hash) &#123; HashEntry&lt;K,V&gt;[] tab = table; // 把散列值与 table 数组长度减 1 的值相“与”，// 得到散列值对应的 table 数组的下标 // 然后返回 table 数组中此下标对应的 HashEntry 元素 return tab[hash &amp; (tab.length - 1)]; &#125; &#125; 3、ConcurrentHashMap 默认并发数为16 映射表的默认初始容量为16,即16个桶 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586public class ConcurrentHashMap&lt;K, V&gt; extends AbstractMap&lt;K, V&gt; implements ConcurrentMap&lt;K, V&gt;, Serializable &#123; /** * 散列映射表的默认初始容量为 16，即初始默认为 16 个桶 * 在构造函数中没有指定这个参数时，使用本参数 */ static final int DEFAULT_INITIAL_CAPACITY= 16; /** * 散列映射表的默认装载因子为 0.75，该值是 table 中包含的 HashEntry 元素的个数与* table 数组长度的比值 * 当 table 中包含的 HashEntry 元素的个数超过了 table 数组的长度与装载因子的乘积时，* 将触发 再散列 * 在构造函数中没有指定这个参数时，使用本参数 */ static final float DEFAULT_LOAD_FACTOR= 0.75f; /** * 散列表的默认并发级别为 16。该值表示当前更新线程的估计数 * 在构造函数中没有指定这个参数时，使用本参数 */ static final int DEFAULT_CONCURRENCY_LEVEL= 16; /** * segments 的掩码值 * key 的散列码的高位用来选择具体的 segment */ final int segmentMask; /** * 偏移量 */ final int segmentShift; /** * 由 Segment 对象组成的数组 */ final Segment&lt;K,V&gt;[] segments; /** * 创建一个带有指定初始容量、加载因子和并发级别的新的空映射。 */ public ConcurrentHashMap(int initialCapacity, float loadFactor, int concurrencyLevel) &#123; if(!(loadFactor &gt; 0) || initialCapacity &lt; 0 || concurrencyLevel &lt;= 0) throw new IllegalArgumentException(); if(concurrencyLevel &gt; MAX_SEGMENTS) concurrencyLevel = MAX_SEGMENTS; // 寻找最佳匹配参数（不小于给定参数的最接近的 2 次幂） int sshift = 0; int ssize = 1; while(ssize &lt; concurrencyLevel) &#123; ++sshift; ssize &lt;&lt;= 1; &#125; segmentShift = 32 - sshift; // 偏移量值 segmentMask = ssize - 1; // 掩码值 this.segments = Segment.newArray(ssize); // 创建数组 if (initialCapacity &gt; MAXIMUM_CAPACITY) initialCapacity = MAXIMUM_CAPACITY; int c = initialCapacity / ssize; if(c * ssize &lt; initialCapacity) ++c; int cap = 1; while(cap &lt; c) cap &lt;&lt;= 1; // 依次遍历每个数组元素 for(int i = 0; i &lt; this.segments.length; ++i) // 初始化每个数组元素引用的 Segment 对象this.segments[i] = new Segment&lt;K,V&gt;(cap, loadFactor); &#125; /** * 创建一个带有默认初始容量 (16)、默认加载因子 (0.75) 和 默认并发级别 (16) * 的空散列映射表。 */ public ConcurrentHashMap() &#123; // 使用三个默认参数，调用上面重载的构造函数来创建空散列映射表this(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_CONCURRENCY_LEVEL); &#125; put方法ConcurrentHashMap: 根据 key 计算出对应的 hash 值 1234567public V put(K key, V value) &#123; if (value == null) //ConcurrentHashMap 中不允许用 null 作为映射值 throw new NullPointerException(); int hash = hash(key.hashCode()); // 计算键对应的散列码 // 根据散列码找到对应的 Segment return segmentFor(hash).put(key, hash, value, false); &#125; 根据 hash 值找到对应的 Segment 12345678910/** * 使用 key 的散列码来得到 segments 数组中对应的 Segment */ final Segment&lt;K,V&gt; segmentFor(int hash) &#123; // 将散列值右移 segmentShift 个位，并在高位填充 0 // 然后把得到的值与 segmentMask 相“与”// 从而得到 hash 值对应的 segments 数组的下标值// 最后根据下标值返回散列码对应的 Segment 对象 return segments[(hash &gt;&gt;&gt; segmentShift) &amp; segmentMask]; &#125; Segment: 在 Segment 中执行具体的 put 操作 12345678910111213141516171819202122232425262728293031323334353637V put(K key, int hash, V value, boolean onlyIfAbsent) &#123; lock(); // 加锁，这里是锁定某个 Segment 对象而非整个 ConcurrentHashMap try &#123; int c = count; if (c++ &gt; threshold) // 如果超过再散列的阈值 rehash(); // 执行再散列，table 数组的长度将扩充一倍 HashEntry&lt;K,V&gt;[] tab = table; // 把散列码值与 table 数组的长度减 1 的值相“与” // 得到该散列码对应的 table 数组的下标值 int index = hash &amp; (tab.length - 1); // 找到散列码对应的具体的那个桶 HashEntry&lt;K,V&gt; first = tab[index]; HashEntry&lt;K,V&gt; e = first; while (e != null &amp;&amp; (e.hash != hash || !key.equals(e.key))) e = e.next; V oldValue; if (e != null) &#123; // 如果键 / 值对以经存在 oldValue = e.value; if (!onlyIfAbsent) e.value = value; // 设置 value 值 &#125; else &#123; // 键 / 值对不存在 oldValue = null; ++modCount; // 要添加新节点到链表中，所以 modCont 要加 1 // 创建新节点，并添加到链表的头部 tab[index] = new HashEntry&lt;K,V&gt;(key, hash, first, value); count = c; // 写 count 变量 &#125; return oldValue; &#125; finally &#123; unlock(); // 解锁 &#125; &#125; HashEntry 对象的不变性来降低读操作对加锁的需求 HashEntry的next属性声明为final：不能把节点添加到链接的中间和尾部，也不能在链接的中间和尾部删除节点，访问某个节点时，这个节点之后链接不会被改变。 HashEntry的value属性声明为volatile，某个写线程对 value 属性的写入马上可以被后续的某个读线程“看”到；ConcurrentHashMap 中，不允许用 null 作为键和值，当读线程读到某个 HashEntry 的 value 属性的值为 null 时，便知道产生了冲突——发生了重排序现象，需要加锁后重新读入这个 value 值 对散列表做非结构性修改的操作：只是更改某个 HashEntry 的 value 域的值；写线程对链表的非结构性修改能够被后续不加锁的读线程“看到 对散列表做结构性修改：实质上是对某个桶指向的链表做结构性修改,如果能够确保：在读线程遍历一个链表期间，写线程对这个链表所做的结构性修改不影响读线程继续正常遍历这个链表。那么读 / 写线程之间就可以安全并发访问这个 ConcurrentHashMap clear操作：只是把 ConcurrentHashMap 中所有的桶“置空”，每个桶之前引用的链表依然存在，只是桶不再引用到这些链表（所有链表的结构并没有被修改）。正在遍历某个链表的读线程依然可以正常执行对该链表的遍历 put操作：put 操作如果需要插入一个新节点到链表中时 , 会在链表头部插入这个新节点。此时，链表中的原有节点的链接并没有被修改。也就是说：插入新健 / 值对到链表中的操作不会影响读线程正常遍历这个链表 remove操作： 待删除节点之后的节点原样保留在链表中，待删除节点之前的节点被克隆到新链表，链表的新头节点为待删除节点之前的那个节点；在执行 remove 操作时，原始链表并没有被修改，也就是说：读线程不会受同时执行 remove 操作的并发写线程的干扰 删除C节点前： 删除C节点后： Segment的remove方法： 123456789101112131415161718192021222324252627282930313233343536V remove(Object key, int hash, Object value) &#123; lock(); // 加锁 try&#123; int c = count - 1; HashEntry&lt;K,V&gt;[] tab = table; // 根据散列码找到 table 的下标值 int index = hash &amp; (tab.length - 1); // 找到散列码对应的那个桶 HashEntry&lt;K,V&gt; first = tab[index]; HashEntry&lt;K,V&gt; e = first; while(e != null&amp;&amp; (e.hash != hash || !key.equals(e.key))) e = e.next; V oldValue = null; if(e != null) &#123; V v = e.value; if(value == null|| value.equals(v)) &#123; // 找到要删除的节点 oldValue = v; ++modCount; // 所有处于待删除节点之后的节点原样保留在链表中 // 所有处于待删除节点之前的节点被克隆到新链表中 HashEntry&lt;K,V&gt; newFirst = e.next;// 待删节点的后继结点 for(HashEntry&lt;K,V&gt; p = first; p != e; p = p.next) newFirst = new HashEntry&lt;K,V&gt;(p.key, p.hash, newFirst, p.value); // 把桶链接到新的头结点 // 新的头结点是原链表中，删除节点之前的那个节点 tab[index] = newFirst; count = c; // 写 count 变量 &#125; &#125; return oldValue; &#125; finally&#123; unlock(); // 解锁 &#125; &#125; Segment的volatile修饰的count属性用来统计Segment中HashEntry的个数 在 ConcurrentHashMap 中，所有执行写操作的方法（put, remove, clear），在对链表做结构性修改之后，在退出写方法前都会去写这个 count 变量。所有未加锁的读操作（get, contains, containsKey）在读方法中，都会首先去读取这个 count 变量 Segment中的get方法：12345678910111213141516V get(Object key, int hash) &#123; if(count != 0) &#123; // 首先读 count 变量 HashEntry&lt;K,V&gt; e = getFirst(hash); while(e != null) &#123; if(e.hash == hash &amp;&amp; key.equals(e.key)) &#123; V v = e.value; if(v != null) return v; // 如果读到 value 域为 null，说明发生了重排序，加锁后重新读取 return readValueUnderLock(e); &#125; e = e.next; &#125; &#125; return null; &#125; ConcurrentHashMap的size操作先尝试2次通过不锁住Segment的方式来统计各个Segment大小，如果统计的过程中，容器的count发生了变化，则再采用加锁的方式来统计所有Segment的大小 在put , remove和clean方法里操作元素前都会将变量modCount进行加1，那么在统计size前后比较modCount是否发生变化，从而得知容器的大小是否发生变化 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748/** * Returns the number of key-value mappings in this map. If the * map contains more than &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt; elements, returns * &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt;. * * @return the number of key-value mappings in this map */ public int size() &#123; final Segment&lt;K,V&gt;[] segments = this.segments; long sum = 0; long check = 0; int[] mc = new int[segments.length]; // Try a few times to get accurate count. On failure due to // continuous async changes in table, resort to locking. for (int k = 0; k &lt; RETRIES_BEFORE_LOCK; ++k) &#123; check = 0; sum = 0; int mcsum = 0; for (int i = 0; i &lt; segments.length; ++i) &#123; sum += segments[i].count; mcsum += mc[i] = segments[i].modCount; // 在统计size时记录modCount &#125; if (mcsum != 0) &#123; for (int i = 0; i &lt; segments.length; ++i) &#123; check += segments[i].count; if (mc[i] != segments[i].modCount) &#123; // 统计size后比较各段的modCount是否发生变化 check = -1; // force retry break; &#125; &#125; &#125; if (check == sum)// 如果统计size前后各段的modCount没变，且两次得到的总数一致，直接返回 break; &#125; if (check != sum) &#123; // Resort to locking all segments // 加锁统计 sum = 0; for (int i = 0; i &lt; segments.length; ++i) segments[i].lock(); for (int i = 0; i &lt; segments.length; ++i) sum += segments[i].count; for (int i = 0; i &lt; segments.length; ++i) segments[i].unlock(); &#125; if (sum &gt; Integer.MAX_VALUE) return Integer.MAX_VALUE; else return (int)sum; &#125; ConcurrentHashMap的重哈希操作ConcurrentHashMap的重哈希实际上是对ConcurrentHashMap的某个段的重哈希，因此ConcurrentHashMap的每个段所包含的桶位自然也就不尽相同 由于扩容是按照2的幂次方进行的，所以扩展前在同一个桶中的元素，现在要么还是在原来的序号的桶里，或者就是原来的序号再加上一个2的幂次方，就这两种选择 JDK8实现","categories":[],"tags":[]},{"title":"HashMap","slug":"HashMap","date":"2018-03-21T04:57:47.000Z","updated":"2018-03-21T05:06:23.000Z","comments":true,"path":"2018/03/21/HashMap/","link":"","permalink":"https://killgc.github.io/shortfeng/2018/03/21/HashMap/","excerpt":"","text":"HashMap 特点： 允许null键/值 非同步 不保证有序（比如插入顺序） 不保证顺序不随时间变化","categories":[],"tags":[]},{"title":"JVM","slug":"JVM","date":"2018-03-19T14:22:30.000Z","updated":"2018-03-22T14:28:16.000Z","comments":true,"path":"2018/03/19/JVM/","link":"","permalink":"https://killgc.github.io/shortfeng/2018/03/19/JVM/","excerpt":"","text":"内存区域 Java内存粗糙的分为堆内存、栈内存 运行时数据区域： 程序计数器 当前线程所执行的字节码的行号指示器，用于线程切换后能恢复到正确的执行位置，线程私有的 Java虚拟机栈 为虚拟机执行Java方法服务，线程私有的 本地方法栈 为虚拟机执行Native方法服务，线程私有的 Java堆 别名GC堆，内存中最大的一块，垃圾收集器管理的主要区域，细分为新生代和老年代，所有线程共享 方法区 别名叫非堆(永久代），用于存储已被虚拟机加载的类信息、常量、静态变量、即使编译器编译后的代码等数据，所有线程共享。运行时常量池畏方法区的一部分。回收的目标主要是针对常量池回收和对类型卸载。 内存相关的异常： StackOverflowError异常 线程请求的栈深度大于虚拟机允许的深度，Java虚拟机栈、本地方法栈区域可能会抛出该异常 OutOfMemoryError异常 虚拟机栈可以动态扩张，如果扩展时无法申请足够的内存。或者在堆中没有内存来分配给对象，并且堆也无法再扩展。或者常量池无法再申请到内存。Java虚拟机栈、本地方法栈、Java堆、常量池区域可能会抛出该异常 垃圾收集算法 最基础的算法为标记-清除，其它收集算法都是基于这种思路并对其不足进行改进而得道。 常用算法： 引用计数算法 存在循环引用问题 标记-清除(mark-sweep)算法 首先标记出所有需要回收的对象，在标记完后统一回收所有被标记的对象。最大的问题为标记和清除的两个过程效率都不高、回收后存在大量不连续的内存碎片、不利于大对象分配 复制算法 将内存空间划分为大小相等的两块，每次只使用其中一块，当一块内存用完，将存活的对象复制到另外一块内存中，然后把用完的一块内存一次清理掉。比标记-清除算法效率高，但是缺点是内存使用率不高（内存缩小为原来的一半）。这种收集算法主要用来收集新生代内存，如果对象存活率较高，就要进行较多的复制操作，效率会变低。 标记-整理(mark-compact)算法 标记过程与标记-清除算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象向一端移动，然后直接清理边界以外的内存。适合老年代内存回收。 新生代： 特点 每次垃圾回收时都会有大批对象死去，只有少量对象存活 组成 将内存分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden和其中一块Survivor。当回收时，将Eden和Survivor中还存活的对象一次性复制到另外一块Survivor空间，最后清理掉Eden和刚才用过的Survivor空间。HotSpot虚拟机默认Eden和Survivor的大小比例为8:1。当Survivor空间不够用，需要依赖其它内存（老年代）进行分配担保 采用复制算法 老年代： 特点 老年代中对象存活率高、没有额外空间对它进行分配担保 采用标记-清理、标记-整理算法 内存分配与回收策略 1、对象优先在Eden分配： 大多数情况，对象在新生代Eden区中分配。当Eden区没有足够内存空间来分配时，虚拟机将发起一次Minor GC。 2、大对象直接进入老年代: 大对象 需要大量连续内存空间的Java对象(典型的如长字符串及数组)，短命大对象，经常出现大对象容易导致内存还有不少空间时就提前触发垃圾收集以获取足够的连续空间来安置它们。 3、长期存活的对象将进入老年代： 给每个对象定义一个对象年龄计算器，对象在Survivor区中每熬过一次Minor GC，年龄就增加1岁，当它的年龄增加到一定程度（默认15岁），将会晋升到老年代。 4、动态对象年龄判定 虚拟机并不是永远地要求对象的年龄必须达到MaxTenuringThreshold才能晋升老年代 如果Suvivor空间中相同年龄所有对象大小总和大于Survivor空间的一半时，年龄大于或等于该年龄的对象就直接进入老年代，无须等到MaxTenuringThreshold要求的年龄 5、空间分配担保 在发生Minor GC之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果条件成立，那么Minor GC可用确保时安全的，如果不成立，则虚拟机会查看HandlePromotionFailure设置值是否允许担保失败。如果允许，那么会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次Minor GC，尽管这次Minor GC时有风险的；如果效应，或者HandlePromotionFailure设置不允许冒险，那这时也要改为进行一次Full GC。 两种GC： Minor GC 新生代GC，Minor GC非常频繁，一般回收速度也比较快 Major GC／Full GC 老年代GC，出现了Major GC，经常会伴随至少一次Minor GC，Major GC的速度一般比Minor GC慢10倍以上。 虚拟机参数 -XX:+option 开启option参数 -XX:-option 关闭option参数 -XX:option=value 将option参数的值设置为value 整个堆大小=年轻代大小 + 年老代大小 + 持久代大小 配置参数： -Xms 初始堆大小 -Xmx 最大堆大小 -Xmn(1.4or lator) 年轻代大小 为eden+ 2个Survivor,增大年轻代后,将会减小年老代大小.此值对系统性能影响较大,Sun官方推荐配置为整个堆的3/8 -XX:NewSize(1.3/1.4) 年轻代大小 -XX:MaxNewSize(1.3/1.4) 年轻代最大值 -XX:PermSize 持久代(perm gen)初始值 -XX:MaxPermSize 持久代最大值 -Xss 每个线程的堆栈大小 -XX:NewRatio 年轻代与年老代的比值 -XX:SurvivorRatio Eden区与Survivor区的大小比值 内存管理参数： -XX:PretenureSizeThreshold 大小超过这个设置值的对象直接在老年代分配，默认值为15 -XX:MaxTenuringThreshold 对象晋升老年代的年龄阀值 调试参数： -XX:+PrintFlagsFinal 输出索引参数的名称及默认值 -XX:+PrintGC 打印GC信息 -XX:+PrintGCDetails 发生垃圾收集行为时打印内存回收日志 -XX:+HeapDumpOnOutOfMemoryError 虚拟机在OOM异常出现之后自动生成dump文件* -XX:+HeapDumpOnCtrlBreak 使用【Ctrl】+【Break】键让虚拟机生成dump文件 JVM优化命令 1、ps：虚拟机进程状况工具 2、jstat：虚拟机统计信息监视工具 显示本地或远程虚拟机进程中的类装载、内存、垃圾收集、JIT编译等运行数据 定位运行期虚拟机性能问题 3、jinfo：Java配置信息工具 4、jmap：Java内存映像工具 用于生产堆转储快照（heapdump或dump文件） 5、jhat：虚拟机堆转储快照分析工具 6、jstack：Java堆栈跟踪工具 用于生成虚拟机当前时刻的线程快照（threaddump或javacore文件） 用于定位线程出现长时间停顿的原因，如果线程间死锁、死循环、请求外部资源导致的长时间等待 类加载机制 类加载器: 类在虚拟机中的唯一性，由加载它的类加载器和这个类本身一同确立；比较两个类是否“相等”，只有这两个类是由同一类加载器加载的前提下才意义，否则，即使两个类来源于同一个class文件，被同一个虚拟机加载，只要加载它们的类加载器不同，那这两个类就必定不相等。 启动类加载器: 或称引导类加载器，Bootstrap ClassLoader，由C++语言实现，是虚拟机自身的一部分，负责将\\lib目录中或被-Xbootclasspath参数所指定的路径中的类库加载到虚拟机内存,启动类加载器无法被Java程序直接引用 扩展类加载器: Extension ClassLoader，由sun.misc.Launcher$ExtClassLoader实现，负责加载\\lib\\ext目录中或被java.ext.dirs系统变量所指定逻辑中的所有类库。 应用程序类加载器: 或称系统类加载器，Applicatiion ClassLoader，由sun.misc.Launcher$AppClassLoader实现，负责加载用户类路径(ClassPath)所指定的类库，一般情况下程序默认使用应用程序类加载器。 由Java实现的类加载器都继承自抽象类java.lang.ClassLoader。 双亲委派模型： 工作过程是：如果一个类加载器收到类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此索引额加载请求最终都应该传送到顶层的启动类加载器中，只有当父类加载器反馈自己无法完成这个加载请求时，子加载器才会尝试自己去加载。 12345678910111213141516171819202122232425262728293031323334353637protected Class&lt;?&gt; loadClass(String name, boolean resolve) throws ClassNotFoundException&#123; synchronized (getClassLoadingLock(name)) &#123; // First, check if the class has already been loaded Class&lt;?&gt; c = findLoadedClass(name); if (c == null) &#123; long t0 = System.nanoTime(); try &#123; if (parent != null) &#123; c = parent.loadClass(name, false); &#125; else &#123; c = findBootstrapClassOrNull(name); &#125; &#125; catch (ClassNotFoundException e) &#123; // ClassNotFoundException thrown if class not found // from the non-null parent class loader &#125; if (c == null) &#123; // If still not found, then invoke findClass in order // to find the class. long t1 = System.nanoTime(); c = findClass(name); // this is the defining class loader; record the stats sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0); sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1); sun.misc.PerfCounter.getFindClasses().increment(); &#125; &#125; if (resolve) &#123; resolveClass(c); &#125; return c; &#125;&#125; 内存模型java内存模型(java memory model JMM)来屏蔽各种硬件和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的内存访问效果。 1、主内存与工作内存 定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样的底层细节 每个线程有自己的工作内存，工作内存中保存了线程使用到的变量的主内存工作副本，线程对变量的所有操作（读取、赋值）都必须在工作内存中进行；不能直接读写主内存中的变量。 主内存对应Java堆中的对象实例数据部分，而工作内存则对应虚拟机栈中的部分区域。 2、内存交互操作 lock(锁定)：把变量标识为一条线程独占的状态。 unlock(解锁)：把处于锁定状态的变量释放出来。 read(读取)：把变量的值从主内存传输到线程的工作内存中 load(载入)：把read操作从主内存中得到的变量值放入工作内存的变量副本。 use(使用)：把工作内存的变量值传递给执行引擎，每当虚拟机遇到一个需要使用到变量的值的字节码指令时将会执行这个操作。 assign(赋值) 把从执行引擎接收到的值赋给工作内存的变量，每当虚拟机遇到给变量赋值的字节码指令时执行这个操作 store(存储) 把工作内存的值传送到主内存中 write(写入）把store操作从工作内存中得到的变量的值放入主内存的变量中 变量从主内存复制到工作内存，要顺序执行read和load，变量从工作内存同步回主内存，要顺序执行store和write，只要求两个操作顺序执行，而没有保证是连续执行。read和load之间、store和write之间是可以插入其他指令的。如read a、read b、load b、load a。 3、volatile型变量 最轻量级的同步机制 特性： 保证变量对所有线程的可见性，可见性是指一条线程修改了这个变量的值，新值对于其他线程来说是可以立即得到的 每次使用之前都要刷新 新值立即同步到主内存 语义是禁止指令重排序优化 不符合以下规则的运算场景，仍然要通过加锁(synchronized或java.util.concurrent中的原子类)来保证原子性： 运算结果并不依赖当前变量的当前值，或者能够确保只有单一线程修改变量的值。 变量不需要与其他的状态变量共同参与不变约束。 4、long和double型变量的非原子协定 5、原子性、可见性与有序性 原子性： 可见性：除了volatile外，synchronized和final也能实现可见性。 有序性：如果在本线程内观察，所有操作都是有序的；如果在一个线程中观察另外一个线程，所有操作都是无序的。前半句是指线程内表现为串行的语义，后半句是指“指令重排序”现象和“工作内存与主内存同步延迟”现象。volatile和synchronized能保证线程之间操作的有序性。 6、先行发生原则(happen-before) 先行发生是Java内存模型中定义的两项操作之间的偏序关系，如果说操作A先行发生与操作B，其实是说在发生操作B之前，操作A产生的影响能被操作B观察到，“影响”包括修改了内存中共享变量的值、发送了消息、调用了方法","categories":[],"tags":[]},{"title":"mysql","slug":"mysql","date":"2018-03-18T08:23:56.000Z","updated":"2018-03-18T14:55:18.000Z","comments":true,"path":"2018/03/18/mysql/","link":"","permalink":"https://killgc.github.io/shortfeng/2018/03/18/mysql/","excerpt":"","text":"并发控制mysql通过加锁进行并发控制。mysql有两种锁，分别是共享锁和排它锁，也叫读锁和写锁。读锁是共享的，写锁是排它的。多个读锁可以同时存在，但是写锁不能和读锁和写锁共存。在读多写少的场景比较适合读写锁。 按锁的粒度，分为表级锁和行级锁。 Myisam与InnoDB区别 InnoDB支持事务，Myisam不支持 InnoDB支持外键，Myisam不支持 InnoDB是聚集索引，数据文件和索引绑在一起，必须要主键索引；Myisam是非聚集索引，数据文件是分离的，索引保存的是数据文件的指针，主键索引和辅助索引是独立的 InnoDB不保存表的具体行数，执行select count(*) from table是需要全表扫描；而Myisam用一个变量保存整个表的行数，执行上述语句只需要读出该变量即可，速度很快。 InnoDB不支持全文索引，而Myisam支持全文索引。 InnoDB支持行级锁，而Myisam只支持表级锁 聚簇索引和非聚簇索引myisam的主键索引和其它索引没有什么不同，都只是存储了数据的物理位置指针，innoDB的聚簇索引和非聚簇索引很不相同。 聚簇索引：InnoDB一定会建立聚簇索引，把实际数据行与相关的键值保存在一起。 一个表只能有一个聚簇索引 有主键时，根据主键创建聚簇索引 没有主键时，会用一个唯一且不为空的索引列作为主键创建聚簇索引 以上都不满足，隐式定义一个主键作为聚簇索引 主键不能太大 按主键顺序插入行对应高并发，按主键顺序插入行可能会造成主键争用，主键的上限会成为热点，并发插入会导致间隙锁经侦；另外一个热点是auto_increment锁机制 非聚簇索引：非聚簇索引（二级索引），也称为辅助索引 叶子节点保存的不是行的物理位置指针，而是是主键值，当行移动或数据页分裂时无需更新二级索引的物理位置指针。 访问数据需要两次索引查找 B树、B+树、B*树InnoDB使用的是B+树。 B树(B-Tree）：B树作为一种多路搜索树（并不是二叉的） 定义任意非叶子结点最多只有M个儿子；且M&gt;2； 根结点的儿子数为[2, M]； 除根结点以外的非叶子结点的儿子数为[M/2, M]； 每个结点存放至少M/2-1（取上整）和至多M-1个关键字；(至少2个关键字） 非叶子结点的关键字个数=指向儿子的指针个数-1； 非叶子结点的关键字：K[1], K[2], …, K[M-1]；且K[i] &lt; K[i+1]；&gt; * v非叶子结点的指针：P[1], P[2], …, P[M]；其中P[1]指向关键字小于K[1]的子树，P[M]指向关键字大于K[M-1]的子树，其它P[i]指向关键字属于(K[i-1], K[i])的子树； 所有叶子结点位于同一层； B+树(B+tree)：B+树是B树的变体，也是一种多路搜索树，其定义基本与B-树相同，除了： 非叶子结点的子树指针与关键字个数相同； 非叶子结点的子树指针P[i]，指向关键字值属于[K[i], K[i+1])的子树（B-树是开区间）； 为所有叶子结点增加一个链指针； 所有关键字都在叶子结点出现； B+树性质： 所有关键字都出现在叶子结点的链表中（稠密索引），且链表中的关键字恰好是有序的； 不可能在非叶子结点命中； 非叶子结点相当于是叶子结点的索引（稀疏索引），叶子结点相当于是存储（关键字）数据的数据层； 更适合文件索引系统。 B∗树：B*树是B+树的变体，在B+树的非根和非叶子结点再增加指向兄弟的指针，将结点的最低利用率从1/2提高到2/3 B∗树定义了非叶子结点关键字个数至少为23M，即块的最低使用率为2/3（代替B+树的1/2）； B+树的分裂：当一个结点满时，分配一个新的结点，并将原结点中1/2的数据复制到新结点，最后在父结点中增加新结点的指针；B+树的分裂只影响原结点和父结点，而不会影响兄弟结点，所以它不需要指向兄弟的指针； B∗树的分裂：当一个结点满时，如果它的下一个兄弟结点未满，那么将一部分数据移到兄弟结点中，再在原结点插入关键字，最后修改父结点中兄弟结点的关键字（因为兄弟结点的关键字范围改变了）；如果兄弟也满了，则在原结点与兄弟结点之间增加新结点，并各复制1/3的数据到新结点，最后在父结点增加新结点的指针； 所以，B∗树分配新结点的概率比B+树要低，空间使用率更高。","categories":[],"tags":[]},{"title":"spring事务传播机制和隔离级别","slug":"spring事务传播机制和隔离级别","date":"2018-03-15T15:24:57.000Z","updated":"2018-03-29T08:44:09.000Z","comments":true,"path":"2018/03/15/spring事务传播机制和隔离级别/","link":"","permalink":"https://killgc.github.io/shortfeng/2018/03/15/spring事务传播机制和隔离级别/","excerpt":"","text":"spring事务传播机制和隔离级别事务传播机制 propagation_required 支持当前事务，如果不存在事务，则新建一个事务 propagation_supports 支持当前事务，如果不存在事务，则以非事务方式执行 propagation_mandatory 支持当前事务，如果不存在事务，则抛出异常 propagation_required_new 新建事务，如果当前存在事务，则挂起当前事务 propagation_not_supported 以非事务方式执行，如果当前存在事务，则把当前事务挂起 propagation_never 以非事务方式执行，如果当前存在事务，则抛出异常 propagation_nested 如果当前存在事务，则在嵌套事务内执行，如果当前没有事务，则其行为与propagation_required一样。嵌套的事务可以独立于当前事务进行单独的提交或回滚。内部事务的回滚不会对外部事务造成影响，如果外部事务commit, 嵌套事务也会被commit, 这个规则同样适用于 roll back 事务隔离级别 数据库事务并发的三个问题： 脏读 脏读发生在一个事务读取另外一个事务改写未提交的数据，如果改写在稍后被回滚，就有可能出现数据不一致。 不可重复读 一个事务执行相同的查询两次或两次以上，每次得到不同的数据，通常是由于另外一个事务在两次查询期间进行更新。通过锁住满足条件的记录来解决。重点在于update和delete 幻读 一个事务读取了几行数据，另外一个事务插入了一些数据，在后面的查询，第一个事务会发现多了一些原本不存在的记录。通过锁住满足条件及其相近的记录。重点在于insert spring中对应数据库的隔离级别： isolation_default 使用数据库默认的隔离级别 isolation_read_uncommited 读未提交，可能出现脏读、不可重复读、幻读 isolation_read_commited 读已提交，避免了脏读，可能会出现不可重复读、幻读 isolation_repeatable_read 可重复读，避免了脏读、不可重复读，可能出现幻读 isolation_seriablizable 串行访问，避免脏读、不可重复读、幻读。读加共享锁，写加排他锁，读写互斥 数据库隔离级别： mysql数据库的默认隔离级别为repeatable_read，并且解决了幻读问题。 oracle数据库的默认隔离级别为read_commited 回滚机制回滚规则用于定义哪些异常会导致回滚，哪些异常不会导致回滚默认情况下，只有遇到运行时异常才会回滚，遇到受检异常不回滚。 MVCC(多版本并发控制)全称为Multi-Version Currency Control，为了查询一些正在被另外事务更新的行，并且可以看到它们被更新之前的值。可以增强并发，实现查询不用等待另外事务释放锁。 在InnoDB中,给每行增加两个隐藏字段来实现mvcc，一个用来记录行的创建时间，一个用了记录行的过期时间（删除时间）。在实际实现中，存储的并不是时间，而是事务版本号，每开启一个新的事务，事务的版本号就会递增。mysql的默认隔离级别repeatable read下，增删查改的实现为： select 读取创建版本号小于或等于当前事务版本号，且删除版本号为空或大于当前事务版本号的记录，这样可以保证在读取之前记录是存在的 insert 创建版本号为当前事务版本号 update 插入一条新记录，新记录的创建版本号为当前事务版本号，原记录的删除版本号为当前事务版本号 delete 删除版本号为当前事务版本号 Mvcc只支持repeatable read和read commited隔离级别。read uncommited与Mvcc不兼容，因为不能找到适合它们事务版本的行版本，每次读取都是最新版本。serailizable与Mvcc也不兼容，因为每次读操作都会锁定它们返回的每一行数据 快照读和当前读： 快照读 读取的快照版本，也就是历史版本。普通的select是快照读 当前读 读取的是最新版本。update、insert、delete、select .. for update、select .. lock in share mode是当前读 锁定读和一致性非锁定读： 锁定读 事务中标准的select语句是不会加锁的，select .. for update（与update加锁一样）、select .. lock in share mode（加共享锁，其它事务只读不能修改，直到当前事务提交）两种除外。 一致性非锁定读 简称一致性读，读的是数据库某个时间点的快照。如果隔离级别是repeatable_read，同一个事务中的所有一致性非锁定读都读的是事务中第一个读读到的快照版，如果隔离级别为read_commited，那么事务的每一个一致性非锁定读都会读到自己刷新的快照版本。一致性非锁定读不会给它访问的表加任何形式的锁，因此其它事务可以并发的修改它们。 悲观锁和乐观锁： 悲观锁 数据库总是认为别人会修改它所操作的数据，因此在操作数据过程中将数据加锁 乐观锁 总是认为别人不会修改，通过版本来实现 锁： record lock（记录锁） 在索引记录上加锁 grap locks（间隙锁） 在索引记录之间加锁，或者在第一个索引记录之前加锁，或者在最后一个索引记录之后加锁 next key lock 在索引记录上加锁，并且在索引记录之间的间隙加锁，相当于record lock与grap locks的结合 一致性读保证了可重复读，间隙锁防止了幻读。 遇到的问题同一service两个方法之间调用，被调用方法的@Transaction配置会被忽略 12345678910111213141516171819202122232425262728migration方法调用singleProcess方法singleProcess方法的事务配置会被忽略出现的结果是两个方法执行的数据库操作都成功了 @Transactional @Override public void migration() &#123; B2bPartnerTmpDO record = new B2bPartnerTmpDO(); record.setId(100008001L); record.setCorpDescription(\"22\"); partnerTmpManager.updateByPrimaryKeySelective(record); try &#123; singleProcess();//调用目标对象的方法，不能触发对singleProcess方法的事务增强 &#125;catch (Exception ex)&#123; log.error(\"出现异常:\"+ex.getMessage()); &#125; &#125; @Transactional(propagation=Propagation.REQUIRES_NEW) public void singleProcess()&#123; B2bPartnerTmpDO record = new B2bPartnerTmpDO(); record.setId(100008002L); record.setCorpDescription(\"33\"); partnerTmpManager.updateByPrimaryKeySelective(record); throw new RuntimeException(\"singleProcess出现异常\"); &#125; 123456789101112131415161718192021222324migration方法调用singleProcess方法，singleProcess方法的事务配置会被忽略出现的结果是两个方法的代码合并在一起了，执行的数据库操作都回滚了 @Transactional @Override public void migration() &#123; B2bPartnerTmpDO record = new B2bPartnerTmpDO(); record.setId(100008001L); record.setCorpDescription(\"22\"); partnerTmpManager.updateByPrimaryKeySelective(record); singleProcess();//调用目标对象的方法，不能触发对singleProcess方法的事务增强 throw new RuntimeException(\"migration出现异常\"); &#125; @Transactional(propagation=Propagation.REQUIRES_NEW) public void singleProcess()&#123; B2bPartnerTmpDO record = new B2bPartnerTmpDO(); record.setId(100008002L); record.setCorpDescription(\"33\"); partnerTmpManager.updateByPrimaryKeySelective(record); &#125; 123456789101112131415161718192021222324252627282930结果是migration的sql执行成功，singleProcess方法是新启一个事务，事务出现异常进行回滚，singleProcess方法sql执行回滚了。 @Autowired private MigrationService migrationService;//引用代理自身的代理对象 @Transactional @Override public void migration() &#123; B2bPartnerTmpDO record = new B2bPartnerTmpDO(); record.setId(100008001L); record.setCorpDescription(\"22\"); partnerTmpManager.updateByPrimaryKeySelective(record); try &#123; //调用代理对象的方法，能触发对singleProcess方法的事务增强 migrationService.singleProcess(); &#125;catch (Exception ex)&#123; log.error(\"出现异常:\"+ex.getMessage()); &#125; &#125; @Transactional(propagation=Propagation.REQUIRES_NEW) public void singleProcess()&#123; B2bPartnerTmpDO record = new B2bPartnerTmpDO(); record.setId(100008002L); record.setCorpDescription(\"33\"); partnerTmpManager.updateByPrimaryKeySelective(record); throw new RuntimeException(\"singleProcess出现异常\"); &#125; 12345678910111213141516171819202122232425262728293031323334353637虽然在migration方法中对singleProcess方法出现的异常进行catch了，catch后面的sql语句也能执行下去，但是最终的结果是所有数据库操作都回滚了。 @Autowired private MigrationService migrationService; @Transactional @Override public void migration() &#123; B2bPartnerTmpDO record = new B2bPartnerTmpDO(); record.setId(100008001L); record.setCorpDescription(\"22\"); partnerTmpManager.updateByPrimaryKeySelective(record); //migrationService.singleProcess(); try &#123; migrationService.singleProcess(); &#125;catch (Exception ex)&#123; log.error(\"出现异常:\"+ex.getMessage()); &#125; B2bPartnerTmpDO record2 = new B2bPartnerTmpDO(); record2.setId(100008003L); record2.setCorpDescription(\"44\"); partnerTmpManager.updateByPrimaryKeySelective(record2); &#125; @Transactional public void singleProcess()&#123; B2bPartnerTmpDO record = new B2bPartnerTmpDO(); record.setId(100008002L); record.setCorpDescription(\"33\"); partnerTmpManager.updateByPrimaryKeySelective(record); throw new RuntimeException(\"singleProcess出现异常\"); &#125;","categories":[],"tags":[]},{"title":"性能优化相关linux命令","slug":"性能优化相关linux命令","date":"2018-03-13T08:48:10.000Z","updated":"2018-03-14T12:56:36.000Z","comments":true,"path":"2018/03/13/性能优化相关linux命令/","link":"","permalink":"https://killgc.github.io/shortfeng/2018/03/13/性能优化相关linux命令/","excerpt":"","text":"性能优化相关linux命令 top命令top命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器，查看系统平均负载和 CPU 使用率 平均负载有三个数字：63.66，58.39，57.18，分别表示过去 1 分钟、5 分钟、15 分钟机器的负载。按照经验，若数值小于 0.7*CPU 个数，则系统工作正常；若超过这个值，甚至达到 CPU 核数的四五倍，则系统的负载就明显偏高 命令格式：top [参数] 命令功能：显示当前系统正在执行的进程的相关信息，包括进程ID、内存占用率、CPU占用率等 默认以pid倒序排序命令参数： top [-a | -d | -e | -c &lt;mode&gt;] [-F | -f] [-h] [-i &lt;interval&gt;] [-l &lt;samples&gt;] [-ncols &lt;columns&gt;] [-o &lt;key&gt;] [-O &lt;skey&gt;] [-R | -r] [-S] [-s &lt;delay&gt;] [-n &lt;nprocs&gt;] [-stats &lt;keys&gt;] [-pid &lt;processid&gt;] [-user &lt;username&gt;] [-U &lt;username&gt;] [-u] [-a | -d | -e | -c &lt;mode&gt;] -c &lt;mode&gt; a 累积模式,从top命令执行开始计算 d delta模式 e 绝对模式，计算事件的绝对数量 n 无事件模式，为默认模式 -a 等同与-c a，类似的-d、-e 分别等同与-c d、-c e [-F | -f] -F 不计算共享内存 -f 计算共享内存，默认 [-h] 打印信息并退出 **这个参数执行不了** [-i &lt;interval&gt;] 每隔多少秒更新信息 [-l &lt;samples&gt;] [-ncols &lt;columns&gt;] [-o &lt;key&gt;] [-O &lt;secondaryKey&gt;] -o &lt;key&gt; 第一排序字段 -O &lt;secondaryKey&gt; 第二排序字段 支持以下key，key前面可以带上+或-，用于说明倒序还是正序： pid 默认 cpu cpu_me CPU time charged to me by other processes. cpu_others CPU time charged to other processes by me csw 上下文切换次数 time 执行时间 threads 别名为th，线程数量（总的线程数/运行中线程数） ports 别名prt，机器端口数量 mregion 别名mreg, reg，内存区数量 mem 内存大小 rprvt 常驻私有地址空间大小 purg 可移除内存大小 vsize Total memory size. vprvt Private address space size. kprvt Private kernel memory size. kshrd Shared kernel memory size. pgrp Process group id. ppid Parent process id. state alias: pstate Process state. uid User ID. wq alias: #wq, workqueue The workqueue total/running. faults alias: fault The number of page faults. cow alias: cow_faults The copy-on-write faults. user alias: username Username. msgsent Total number of mach messages sent. msgrecv Total number of mach messages received. sysbsd Total BSD syscalls. sysmach Total Mach syscalls. -R Do not traverse and report the memory object map for each process. -r Traverse and report the memory object map for each process (de- fault). -S Display the global statistics for swap and purgeable memory. -s &lt;delay&gt; 每隔多少秒更新显示 Set the delay between updates to &lt;delay&gt; seconds. The default delay between updates is 1 second. -stats &lt;keys&gt; Only display the comma separated statistics. See the -o flag for the valid &lt;keys&gt;. -pid &lt;processid&gt; Only display &lt;processid&gt; in top. This option may be specified multiple times. -user &lt;user&gt; Only display processes owned by &lt;user&gt;. -U &lt;user&gt; This is an alias for -user. -u This is an alias equivalent to: -o cpu -O time. 交互式命令： ? Display the help screen. Any character exits help screen mode. This command always works, even in the middle of a command. ^L Redraw the screen. c&lt;mode&gt; Set output mode to &lt;mode&gt;. The supported modes are: a Accumulative mode. d Delta mode. e Event mode. n Non-event mode. O&lt;skey&gt; Use &lt;skey&gt; as a secondary key when ordering the process display. See the -o option for key names. o&lt;key&gt; Order the process display by sorting on &lt;key&gt; in descending or- der. A + or - can be prefixed to the key name to specify as- cending or descending order, respectively. The supported keys and alises are listed with the -o option above. q Quit. r Toggle traversal and reporting of the memory object map for each process. S&lt;signal&gt;&lt;pid&gt; Send &lt;sig&gt; to &lt;pid&gt;. &lt;sig&gt; can be specified either as a number or as a name (for example, HUP). The default signal starts out as TERM. Each time a signal is successfully sent, the default signal is updated to be that signal. &lt;pid&gt; is a process id. s&lt;delay&gt; Set the delay between updates to &lt;delay&gt; seconds. U&lt;user&gt; Only display processes owned by &lt;user&gt;. Either the username or uid number can be specified. To display all processes, press enter without entering a username or uid number. 示例： top -o cpu -O +rsize -s 5 -n 20 Sort the processes according to CPU usage (descending) and resi- dent memory size (ascending), sample and update the display at 5 second intervals, and limit the display to 20 processes. top -c d Run top in delta mode. top -stats pid,command,cpu,th,pstate,time Display only the specified statistics, regardless of any growth of the terminal. If the terminal is too small, only the statis- tics that fit will be displayed. 相关命令： kill(2), vm_stat(1), signal(3), vmmap(1)","categories":[],"tags":[]},{"title":"多线程","slug":"多线程","date":"2018-03-12T11:51:15.000Z","updated":"2018-03-12T11:54:36.000Z","comments":true,"path":"2018/03/12/多线程/","link":"","permalink":"https://killgc.github.io/shortfeng/2018/03/12/多线程/","excerpt":"","text":"##多线程三种来实现线程安全的手段: 互斥同步通过加锁来实现对临界资源的访问限制。加锁方式有Synchorized和Lock 非阻塞同步前面提到的互斥同步属于一种悲观锁机制，非阻塞同步属于乐观锁机制。典型的实现方式就是CAS操 作 无同步方案要保证线程安全，并不是一定就需要同步，两者没有因果关系，同步只是保证共享数据征用时正确性的手段，如果一个方法本来就不涉及共享数据，那它就不需要任何同步措施去保证正确性。ThreadLocal就是这张实现方案","categories":[],"tags":[]},{"title":"ThreadLocal","slug":"ThreadLocal","date":"2018-03-12T09:36:17.000Z","updated":"2018-03-12T10:07:41.000Z","comments":true,"path":"2018/03/12/ThreadLocal/","link":"","permalink":"https://killgc.github.io/shortfeng/2018/03/12/ThreadLocal/","excerpt":"","text":"ThreadLocal synchronized 以时间换空间 ThreadLocal 以空间换时间 Thread类保存了ThreadLocalMap类型的变量, ThreadLocalMap的key为ThreadLoacal对象 1ThreadLocal.ThreadLocalMap threadLocals = null; ThreadLocal类，支持范型 12345678910111213public T get() &#123; Thread t = Thread.currentThread(); ThreadLocalMap map = getMap(t); if (map != null) &#123; ThreadLocalMap.Entry e = map.getEntry(this); if (e != null) &#123; @SuppressWarnings(\"unchecked\") T result = (T)e.value; return result; &#125; &#125; return setInitialValue();&#125; 12345678public void set(T value) &#123; Thread t = Thread.currentThread(); ThreadLocalMap map = getMap(t); if (map != null) map.set(this, value); else createMap(t, value);&#125; 123ThreadLocalMap getMap(Thread t) &#123; return t.threadLocals;&#125; 12345678910private T setInitialValue() &#123; T value = initialValue(); Thread t = Thread.currentThread(); ThreadLocalMap map = getMap(t); if (map != null) map.set(this, value); else createMap(t, value); return value;&#125; 示例1234567891011121314151617181920212223242526272829import java.sql.Connection;import java.sql.DriverManager;import java.sql.SQLException;public class ConnectionManager &#123; private static ThreadLocal&lt;Connection&gt; connectionHolder = new ThreadLocal&lt;Connection&gt;() &#123; @Override protected Connection initialValue() &#123; Connection conn = null; try &#123; conn = DriverManager.getConnection( \"jdbc:mysql://localhost:3306/test\", \"username\", \"password\"); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; return conn; &#125; &#125;; public static Connection getConnection() &#123; return connectionHolder.get(); &#125; public static void setConnection(Connection conn) &#123; connectionHolder.set(conn); &#125;&#125; 可以创建不同的ThreadLocal实例来实现多个变量在不同线程间的访问隔离，为什么可以这么做？因为不同的ThreadLocal对象作为不同键，当然也可以在线程的ThreadLocalMap对象中设置不同的值了。通过ThreadLocal对象，在多线程中共享一个值和多个值的区别，就像你在一个HashMap对象中存储一个键值对和多个键值对一样，仅此而已","categories":[],"tags":[]},{"title":"mac linux","slug":"mac linux","date":"2018-03-12T09:36:17.000Z","updated":"2018-06-27T07:46:01.000Z","comments":true,"path":"2018/03/12/mac linux/","link":"","permalink":"https://killgc.github.io/shortfeng/2018/03/12/mac linux/","excerpt":"","text":"linux 1、端口占用及杀死占用进程sudo lsof -i:8080sudo kill -9 2123 2、搜索日志，并打印前后100行的内容cat jetty_stdout.log | grep -C 100 注意接受到流程消息 3、从服务器上下载文件scp publish@172.21.10.70:/home/publish/antx/finance/dev/antx-volks.properties /Users/user/","categories":[],"tags":[]},{"title":"json序列化、反序列化","slug":" json序列化、反序列化","date":"2018-03-12T09:36:17.000Z","updated":"2018-06-12T01:52:06.000Z","comments":true,"path":"2018/03/12/ json序列化、反序列化/","link":"","permalink":"https://killgc.github.io/shortfeng/2018/03/12/ json序列化、反序列化/","excerpt":"","text":"json序列化、反序列化 fastjson：1、序列化 设置某些字段不需要序列化在属性上面加@JSONField(serialize = false)注解 2、 Gson:","categories":[],"tags":[]},{"title":"mysql常用","slug":"dubbo服务调用三次的问题","date":"2018-03-12T09:36:17.000Z","updated":"2018-05-25T16:52:55.000Z","comments":true,"path":"2018/03/12/dubbo服务调用三次的问题/","link":"","permalink":"https://killgc.github.io/shortfeng/2018/03/12/dubbo服务调用三次的问题/","excerpt":"","text":"dubbo服务被调用三次的问题 该服务为涉及新增操作的服务，服务调用多次，导致数据保存了多条相同数据出现该问题，排查过程：1、通过查看数据库数据，发现有三条一样的数据，调试服务方代码，发现也进入了三次。最终在服务方打印调用日志，结果为打印了三次 2、是否消费方也请求了三次，消费方打印日志，消费方且只调用了一次，消费方只调用了一次，服务方且执行了三次，有点摸不到头脑了 3、百度搜索“dubbo服务莫名调用多次”,发现有人遇到相同问题，网上说有两种情况会导致服务调用多次，一是dubbo架包存在多个，二是服务超时重试导致的 4、网上说的原因给我提供思路，我就去检查项目中是否存在多个dubbo架包，发现存在两个不同版本的架包，我试着删除其中一个依赖其中一个版本dubbo架包的依赖配置，但是发现不管用，服务方还是调用三次；换另外一种解决方法，在服务提供方配置的暴露的服务地方设置retries属性为0，发现起作用了 检查修改服务方retries属性为0时 1、消费方日志： org.springframework.web.util.NestedServletException: Request processing failed; nested exception is com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method commitApply in the service com.mhc.spyker.api.service.AdmittanceApplyFacade. Tried 1 times of the providers [192.168.0.105:20882] (1/1) from the registry 172.21.10.42:2181 on the consumer 192.168.0.105 using the dubbo version 2.5.3. Last error is: Invoke remote method timeout. method: commitApply Caused by: com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method commitApply in the service com.mhc.spyker.api.service.AdmittanceApplyFacade. Tried 1 times of the providers [192.168.0.105:20882] (1/1) from the registry 172.21.10.42:2181 on the consumer 192.168.0.105 using the dubbo version 2.5.3. Last error is: Invoke remote method timeout. method: commitApply, Caused by: com.alibaba.dubbo.remoting.TimeoutException: Waiting server-side response timeout by scan timer. start time: 2018-05-26 00:38:45.035, end time: 2018-05-26 00:38:46.044, client elapsed: 11 ms, server elapsed: 998 ms, timeout: 1000 ms, 2、服务方日志,打印服务方执行时间，结果为1684ms2018-05-26 00:38:46.697 DEBUG 5913 — [:20882-thread-2] c.m.s.d.d.A.updateById : ==&gt; Parameters: 4268340(String), 111(Long)2018-05-26 00:38:46.721 DEBUG 5913 — [:20882-thread-2] c.m.s.d.d.A.updateById : &lt;== Updates: 1 Time：24 ms - ID：com.mhc.spyker.dal.dao.AdmittanceApplyRecordDao.updateById Execute SQL： UPDATE b2b_admittance_apply_record SET process_InstanceId=’4268340’ WHERE id=111 时间：16842018-05-26 00:39:45.878 INFO 5913 — [dTimer-thread-1] c.a.dubbo.monitor.dubbo.DubboMonitor : [DUBBO] Send statistics to monitor zookeeper://172.21.10.42:2181/com.alibaba.dubbo.monitor.MonitorService?dubbo=2.6.0&amp;interface=com.alibaba.dubbo.monitor.MonitorService&amp;pid=5913&amp;timestamp=1527265217854, dubbo version: 2.6.0, current host: 192.168.0.1052018-05-26 00:39:45.880 ERROR 5913 — [dTimer-thread-1] c.a.dubbo.monitor.dubbo.DubboMonitor : [DUBBO] Unexpected error occur at send statistic, cause: No provider available from registry 172.21.10.42:2181 for service com.alibaba.dubbo.monitor.MonitorService on consumer 192.168.0.105 use dubbo version 2.6.0, may be providers disabled or not registered ?, dubbo version: 2.6.0, current host: 192.168.0.105 通过日志能看出服务默认超时时间timeout为1000ms，超时默认最多重试两次，导致该问题的原因服务方的执行时间大于超时时间1000ms，导致重试了两次 涉及修改操作： 1、需要把retries设置为0，建议在服务消费方设置 2、需要在服务方设置timeout属性，建议在服务提供方设置（服务提供方了解服务执行时间）","categories":[],"tags":[]},{"title":"CAS、JUC","slug":"CAS与JUC","date":"2018-03-12T09:36:17.000Z","updated":"2018-05-11T15:06:56.000Z","comments":true,"path":"2018/03/12/CAS与JUC/","link":"","permalink":"https://killgc.github.io/shortfeng/2018/03/12/CAS与JUC/","excerpt":"","text":"CAS与JUC","categories":[],"tags":[]},{"title":"OLTP、OLAP","slug":"OLTP、OLAP","date":"2018-03-12T09:36:17.000Z","updated":"2018-06-17T03:20:31.000Z","comments":true,"path":"2018/03/12/OLTP、OLAP/","link":"","permalink":"https://killgc.github.io/shortfeng/2018/03/12/OLTP、OLAP/","excerpt":"","text":"OLTP、OLAP OLTP（on-line transaction processing），联机事务处理 特点： 1、实时性要求高 2、DML多 3、处理时间短 OLAP（On-Line Analytical Processing），联机分析处理 特点： 1、实时性要求不是很高 2、DML少，读多 3、数据量大","categories":[],"tags":[]},{"title":"mysql常用","slug":"mysql总结","date":"2018-03-12T09:36:17.000Z","updated":"2018-05-11T15:10:10.000Z","comments":true,"path":"2018/03/12/mysql总结/","link":"","permalink":"https://killgc.github.io/shortfeng/2018/03/12/mysql总结/","excerpt":"","text":"mysql常用 1、查找子字符串在字符串中的位置，类似oracle的indexof方法 12345LOCATE(substr,str), LOCATE(substr,str,pos) 第一个语法返回substr在字符串str 的第一个出现的位置。 第二个语法返回子符串 substr 在字符串str，从pos处开始的第一次出现的位置。如果substr 不在str 中，则返回值为0 。","categories":[],"tags":[]},{"title":"jdk 8 lambda","slug":"java lambda","date":"2018-03-12T09:36:17.000Z","updated":"2018-06-25T15:33:19.000Z","comments":true,"path":"2018/03/12/java lambda/","link":"","permalink":"https://killgc.github.io/shortfeng/2018/03/12/java lambda/","excerpt":"","text":"jdk 8 lambda 1、匿名类 12345678910111213141516171、匿名类new Thread(new Runnable() &#123; @Override public void run() &#123; System.out.println(\"Before Java8, too much code for too little to do\"); &#125;&#125;).start();2、lambdanew Thread( () -&gt; System.out.println(\"In Java8, Lambda expression rocks !!\") ).start();lambda可以写出如下代码：(params) -&gt; expression(params) -&gt; statement(params) -&gt; &#123; statements &#125; 2、事件 1234567891011121314// Java 8之前：JButton show = new JButton(\"Show\");show.addActionListener(new ActionListener() &#123; @Override public void actionPerformed(ActionEvent e) &#123; System.out.println(\"Event handling without lambda expression is boring\"); &#125;&#125;);// Java 8方式：show.addActionListener((e) -&gt; &#123; System.out.println(\"Light, Camera, Action !! Lambda expressions Rocks\");&#125;); 3、迭代 12345678910111213// Java 8之前：List features = Arrays.asList(\"Lambdas\", \"Default Method\", \"Stream API\", \"Date and Time API\");for (String feature : features) &#123; System.out.println(feature);&#125;// Java 8之后：List features = Arrays.asList(\"Lambdas\", \"Default Method\", \"Stream API\", \"Date and Time API\");features.forEach(n -&gt; System.out.println(n)); // 使用Java 8的方法引用更方便，方法引用由::双冒号操作符标示，// 看起来像C++的作用域解析运算符features.forEach(System.out::println); 4、函数式接口Predicate 12345678910111213141516171819202122232425262728293031323334353637383940414243public static void main(args[])&#123; List languages = Arrays.asList(\"Java\", \"Scala\", \"C++\", \"Haskell\", \"Lisp\"); System.out.println(\"Languages which starts with J :\"); filter(languages, (str)-&gt;str.startsWith(\"J\")); System.out.println(\"Languages which ends with a \"); filter(languages, (str)-&gt;str.endsWith(\"a\")); System.out.println(\"Print all languages :\"); filter(languages, (str)-&gt;true); System.out.println(\"Print no language : \"); filter(languages, (str)-&gt;false); System.out.println(\"Print language whose length greater than 4:\"); filter(languages, (str)-&gt;str.length() &gt; 4);&#125; public static void filter(List names, Predicate condition) &#123; for(String name: names) &#123; if(condition.test(name)) &#123; System.out.println(name + \" \"); &#125; &#125;&#125;// 更好的办法public static void filter(List names, Predicate condition) &#123; names.stream().filter((name) -&gt; (condition.test(name))).forEach((name) -&gt; &#123; System.out.println(name + \" \"); &#125;);&#125;将两个或更多的 Predicate 合成一个// 甚至可以用and()、or()和xor()逻辑函数来合并Predicate，// 例如要找到所有以J开始，长度为四个字母的名字，你可以合并两个Predicate并传入Predicate&lt;String&gt; startsWithJ = (n) -&gt; n.startsWith(\"J\");Predicate&lt;String&gt; fourLetterLong = (n) -&gt; n.length() == 4;names.stream() .filter(startsWithJ.and(fourLetterLong)) .forEach((n) -&gt; System.out.print(\"nName, which starts with 'J' and four letter long is : \" + n)); 5、map、reduce reduce() 函数可以将所有值合并成一个 12345678910111213141516171819202122232425262728293031323334353637383940414243// 不使用lambda表达式为每个订单加上12%的税List costBeforeTax = Arrays.asList(100, 200, 300, 400, 500);for (Integer cost : costBeforeTax) &#123; double price = cost + .12*cost; System.out.println(price);&#125; // 使用lambda表达式List costBeforeTax = Arrays.asList(100, 200, 300, 400, 500);costBeforeTax.stream().map((cost) -&gt; cost + .12*cost).forEach(System.out::println);// 为每个订单加上12%的税// 老方法：List costBeforeTax = Arrays.asList(100, 200, 300, 400, 500);double total = 0;for (Integer cost : costBeforeTax) &#123; double price = cost + .12*cost; total = total + price;&#125;System.out.println(\"Total : \" + total); // 新方法：List costBeforeTax = Arrays.asList(100, 200, 300, 400, 500);double bill = costBeforeTax.stream().map((cost) -&gt; cost + .12*cost).reduce((sum, cost) -&gt; sum + cost).get();System.out.println(\"Total : \" + bill);// 创建一个字符串列表，每个字符串长度大于2List&lt;String&gt; filtered = strList.stream().filter(x -&gt; x.length()&gt; 2).collect(Collectors.toList());System.out.printf(\"Original List : %s, filtered list : %s %n\", strList, filtered);// 将字符串换成大写并用逗号链接起来List&lt;String&gt; G7 = Arrays.asList(\"USA\", \"Japan\", \"France\", \"Germany\", \"Italy\", \"U.K.\",\"Canada\");String G7Countries = G7.stream().map(x -&gt; x.toUpperCase()).collect(Collectors.joining(\", \"));System.out.println(G7Countries);// 用所有不同的数字创建一个正方形列表List&lt;Integer&gt; numbers = Arrays.asList(9, 10, 3, 4, 7, 3, 4);List&lt;Integer&gt; distinct = numbers.stream().map( i -&gt; i*i).distinct().collect(Collectors.toList());System.out.printf(\"Original List : %s, Square Without duplicates : %s %n\", numbers, distinct); 6、计算集合元素的最大值、最小值、总和以及平均值 IntStream、LongStream 和 DoubleStream 等流的类中，有个非常有用的方法叫做 summaryStatistics() 。可以返回 IntSummaryStatistics、LongSummaryStatistics 或者 DoubleSummaryStatistic s，描述流中元素的各种摘要数据。在本例中，我们用这个方法来计算列表的最大值和最小值。它也有 getSum() 和 getAverage() 方法来获得列表的所有元素的总和及平均值。 1234567//获取数字的个数、最小值、最大值、总和以及平均值List&lt;Integer&gt; primes = Arrays.asList(2, 3, 5, 7, 11, 13, 17, 19, 23, 29);IntSummaryStatistics stats = primes.stream().mapToInt((x) -&gt; x).summaryStatistics();System.out.println(\"Highest prime number in List : \" + stats.getMax());System.out.println(\"Lowest prime number in List : \" + stats.getMin());System.out.println(\"Sum of all prime numbers : \" + stats.getSum());System.out.println(\"Average of all prime numbers : \" + stats.getAverage()); 7、结束 泛型、枚举、自动装箱（Autoboxing）、静态导入、并发API和变量参数 1、lambda表达式有个限制，那就是只能引用 final 或 final 局部变量，这就是说不能在lambda内部修改定义在域外的变量 2、lambda表达式仅能放入如下代码：预定义使用了 @Functional 注释的函数式接口，自带一个抽象函数的方法，或者SAM（Single Abstract Method 单个抽象方法）类型。这些称为lambda表达式的目标类型，可以用作返回类型，或lambda目标代码的参数。例如，若一个方法接收Runnable、Comparable或者 Callable 接口，都有单个抽象方法，可以传入lambda表达式。类似的，如果一个方法接受声明于 java.util.function 包内的接口，例如 Predicate、Function、Consumer 或 Supplier，那么可以向其传lambda表达式","categories":[],"tags":[]},{"title":"mvn","slug":"mvn","date":"2018-03-12T09:36:17.000Z","updated":"2018-06-18T15:23:09.000Z","comments":true,"path":"2018/03/12/mvn/","link":"","permalink":"https://killgc.github.io/shortfeng/2018/03/12/mvn/","excerpt":"","text":"mvn 使用以下命令做一次构建 mvn clean install 可以通过以下的构建命令来跳过单元测试 mvn install -Dmaven.test.skip","categories":[],"tags":[]},{"title":"spring aop","slug":"spring aop","date":"2018-03-11T15:08:14.000Z","updated":"2018-03-11T15:24:10.000Z","comments":true,"path":"2018/03/11/spring aop/","link":"","permalink":"https://killgc.github.io/shortfeng/2018/03/11/spring aop/","excerpt":"","text":"spring aop @Transactional 在需要事务管理的地方加@Transactional 注解。@Transactional 注解可以被应用于接口定义和接口方法、类定义和类的 public 方法上。 @Transactional 注解只能应用到 public 可见度的方法上。 如果你在 protected、private 或者 package-visible 的方法上使用 @Transactional 注解，它也不会报错， 但是这个被注解的方法将不会展示已配置的事务设置。 注意仅仅 @Transactional 注解的出现不足于开启事务行为，它仅仅 是一种元数据。必须在配置文件中使用配置元素，才真正开启了事务行为。 通过 元素的 “proxy-target-class” 属性值来控制是基于接口的还是基于类的代理被创建。如果 “proxy-target-class” 属值被设置为 “true”，那么基于类的代理将起作用（这时需要CGLIB库cglib.jar在CLASSPATH中）。如果 “proxy-target-class” 属值被设置为 “false” 或者这个属性被省略，那么标准的JDK基于接口的代理将起作用。 Spring团队建议在具体的类（或类的方法）上使用 @Transactional 注解，而不要使用在类所要实现的任何接口上。在接口上使用 @Transactional 注解，只能当你设置了基于接口的代理时它才生效。因为注解是 不能继承 的，这就意味着如果正在使用基于类的代理时，那么事务的设置将不能被基于类的代理所识别，而且对象也将不会被事务代理所包装。 @Transactional 的事务开启 ，或者是基于接口的 或者是基于类的代理被创建。所以在同一个类中一个方法调用另一个方法有事务的方法，事务是不会起作用的。 1、@Transactional 只能应用到 public 方法才有效 2、避免 Spring 的 AOP 的自调用问题 在 Spring 的 AOP 代理下，只有目标方法由外部调用，目标方法才由 Spring 生成的代理对象来管理，这会造成自调用问题。若同一类中的其他没有@Transactional 注解的方法内部调用有@Transactional 注解的方法，有@Transactional 注解的方法的事务被忽略，不会发生回滚。 123456789101112@Servicepublic class OrderService &#123; private void insert() &#123; insertOrder(); &#125; @Transactional public void insertOrder() &#123; //insert log info //insertOrder //updateAccount &#125;&#125;","categories":[],"tags":[]},{"title":"拦截器","slug":"拦截器","date":"2018-03-07T09:47:55.000Z","updated":"2018-03-08T11:27:38.000Z","comments":true,"path":"2018/03/07/拦截器/","link":"","permalink":"https://killgc.github.io/shortfeng/2018/03/07/拦截器/","excerpt":"","text":"拦截器标签（空格分隔）： java 拦截器 过滤器 拦截器 过滤器 监听器 拦截器与过滤器的区别 过滤器可以简单的理解为“取你所想取”，过滤器关注的是web请求； 拦截器可以简单的理解为“拒你所想拒”，拦截器关注的是方法调用，比如拦截敏感词汇 拦截器是基于java反射机制的，而过滤器是基于函数回调。 拦截器不依赖于Servlet容器，而过滤器依赖于servlet容器。 拦截器只能对action请求起作用，而过滤器可以对几乎所有的请求起作用。 拦截器可以访问action上下文，值栈里的对象，而过滤器不能。在Action的生命周期周，拦截器可以被多次调用，而过滤器只能在容器初始化的时候被调用一次。 执行顺序 ：过滤前 - 拦截前 - Action处理 - 拦截后 - 过滤后过滤器是横向过程 你传入的request,response提前过滤掉一些信息，或者提前设置一些参数，然后再传入servlet或者struts的action进行业务逻辑，比如过滤掉非法url（不是login.do的地址请求，如果用户没有登陆都过滤掉）,或者在传入servlet或者struts的action前统一设置字符集，或者去除掉一些非法字符（聊天室经常用到的，一些骂人的话）。filter 流程是线性的，url传来之后，检查之后 拦截器拦截器的原理是基于jdk动态代理，需实现HandlerInterceptor接口或继承HandlerInterceptorAdapter类 1234567891011121314151617181920212223242526272829303132333435363738394041HandlerInterceptor接口：/*** preHandle方法是进行处理器拦截用的，顾名思义，该方法将在Controller处理之前进行调用，* SpringMVC中的Interceptor拦截器是链式的，可以同时存在多个Interceptor，* 然后SpringMVC会根据声明的前后顺序一个接一个的执行，* 而且所有的Interceptor中的preHandle方法都会在Controller方法调用之前调用。* SpringMVC的这种Interceptor链式结构也是可以进行中断的，* 这种中断方式是令preHandle的返回值为false，当preHandle的返回值为false的时候整个请求就结束了。*/@Overridepublic boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)throws Exception &#123;return true;&#125;/*** 这个方法只会在当前这个Interceptor的preHandle方法返回值为true的时候才会执行。* postHandle是进行处理器拦截用的，它的执行时间是在处理器进行处理之 后， 也就是在Controller的方法调用之后执行，* 但是它会在DispatcherServlet进行视图的渲染之前执行，也就是说在这个方法中你可以对ModelAndView进行操作。* 这个方法的链式结构跟正常访问的方向是相反的，也就是说先声明的Interceptor拦截器该方法反而会后调用，* 这跟Struts2里面的拦截器的执行过程有点像，* 只是Struts2里面的intercept方法中要手动的调用ActionInvocation的invoke方法，* Struts2中调用ActionInvocation的invoke方法就是调用下一个Interceptor或者是调用action，* 然后要在Interceptor之前调用的内容都写在调用invoke之前，要在Interceptor之后调用的内容都写在调用invoke方法之后。*/@Overridepublic void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)throws Exception &#123;&#125;/*** 该方法也是需要当前对应的Interceptor的preHandle方法的返回值为true时才会执行。* 该方法将在整个请求完成之后，也就是DispatcherServlet渲染了视图执行， 这个方法的主要作用是用于清理资源的，*/@Overridepublic void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)throws Exception &#123;&#125; 配置123456789101112131415&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"xmlns:mvc=\"http://www.springframework.org/schema/mvc\"xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsdhttp://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd\"&gt;&lt;mvc:interceptors&gt;&lt;!-- 日志拦截器 --&gt;&lt;mvc:interceptor&gt;&lt;mvc:mapping path=\"/**\" /&gt;&lt;mvc:exclude-mapping path=\"/static/**\" /&gt;&lt;bean class=\"拦截器java代码路径\" /&gt;&lt;/mvc:interceptor&gt;&lt;/mvc:interceptors&gt;&lt;/beans&gt; 工作流程一个拦截器，只有preHandle方法返回true，postHandle、afterCompletion才有可能被执行；如果preHandle方法返回false，则该拦截器的postHandle、afterCompletion必然不会被执行。 假设我们有两个拦截器，例如叫Interceptor1和Interceptor2，当一个请求过来，正常的流程和中断的流程分别如下。 正常流程注意两个拦截器在执行preHandle方法和执行postHandle、afterCompletion方法时，顺序是颠倒的。 1234567891011121314151. Interceptor1.preHandle2. Interceptor2.preHandle3. Controller处理请求4. Interceptor2.postHandle5. Interceptor1.postHandle6. 渲染视图7. Interceptor2.afterCompletion8. Interceptor1.afterCompletion 中断流程假设执行Interceptor2.preHandle中报错，那么流程被中断，之前被执行过的拦截器的afterCompletion仍然会执行。在本例中，即执行了Interceptor1.afterCompletion。 12345671. Interceptor1.preHandle2. Interceptor2.preHandle//中间流程被中断，不再执行3. Interceptor1.afterCompletion 与过滤器共存时的执行顺序拦截器是在DispatcherServlet这个servlet中执行的，因此所有的请求最先进入Filter，最后离开Filter。其顺序如下。 Filter-&gt;Interceptor.preHandle-&gt;Handler-&gt;Interceptor.postHandle-&gt;Interceptor.afterCompletion-&gt;Filter 应用场景拦截器本质上是面向切面编程（AOP），符合横切关注点的功能都可以放在拦截器中来实现，主要的应用场景包括： 登录验证，判断用户是否登录。权限验证，判断用户是否有权限访问资源。日志记录，记录请求日志，以便统计请求访问量。处理cookie、本地化、国际化、主题等。性能监控，监控请求处理时长等。 spring boot配置拦截器为了使自定义的拦截器生效，需要注册拦截器到spring容器中，具体的做法是继承WebMvcConfigurerAdapter类，覆盖其addInterceptors(InterceptorRegistry registry)方法。最后别忘了把Bean注册到Spring容器中，可以选择@Component 或者 @Configuration 123456789101112131415@Componentpublic class InterceptorConfiguration extends WebMvcConfigurerAdapter&#123;@Overridepublic void addInterceptors(InterceptorRegistry registry) &#123;// 注册拦截器InterceptorRegistration ir = registry.addInterceptor(new LoginInterceptor());// 配置拦截的路径ir.addPathPatterns(&quot;/**&quot;);// 配置不拦截的路径ir.excludePathPatterns(&quot;/**.html&quot;);// 还可以在这里注册其它的拦截器//registry.addInterceptor(new OtherInterceptor()).addPathPatterns(&quot;/**&quot;);&#125;&#125;","categories":[],"tags":[]},{"title":"JAVA动态代理","slug":"动态代理","date":"2018-02-09T09:47:55.000Z","updated":"2018-04-03T05:44:39.000Z","comments":true,"path":"2018/02/09/动态代理/","link":"","permalink":"https://killgc.github.io/shortfeng/2018/02/09/动态代理/","excerpt":"","text":"JAVA动态代理 静态代理的代理关系在编译时就确定了，而动态代理的代理关系是在运行期确定的。静态代理实现简单，适合于代理类较少且确定的情况，而动态代理则给我们提供了更大的灵活性 JDK原生动态代理是Java原生支持的，不需要任何外部依赖，但是它只能基于接口进行代理；CGLIB通过继承的方式进行代理，无论目标对象有没有实现接口都可以代理，但是无法处理final、private方法 CGLib创建的动态代理对象性能比JDK创建的动态代理对象的性能高不少，但是CGLib在创建代理对象时所花费的时间却比JDK多得多，所以对于单例的对象，因为无需频繁创建对象，用CGLib合适，反之，使用JDK方式要更为合适一些 jdk采用反射机制调用委托类的方法，cglib采用类似索引的方式直接调用委托类方法 标签（空格分隔）： jdk动态代理 cglib jdk动态代理 jdk动态代理机制中，有两个重要的类或接口，一个是Proxy，另一个是InvocationHandler Proxy类Proxy类是用来动态创建一个代理对象，经常使用newProxyInstance静态方法12345public static Object newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h) throws IllegalArgumentException参数：loader 类加载器interfaces 真实类所拥有的所有接口的数组h 调用处理器对象 InvocationHandler接口InvocationHandler接口只有唯一一个invoke方法12345public Object invoke(Object proxy, Method method, Object[] args) throws Throwable;参数：proxy 代理类对象method 调用真实类对象某个方法对应的method对象args 调用真实类对象某个方法传入的参数 示例1、主题接口 123456package com.example.ford.proxy;public interface Subject &#123; String sayHello(String name); String sayGoodBye();&#125; 2、 被代理类 12345678910111213package com.example.ford.proxy;public class RealSubject implements Subject&#123; @Override public String sayHello(String name) &#123; return \"hello \"+name; &#125; @Override public String sayGoodBye() &#123; return \" good bye\"; &#125;&#125; 3、调用处理器 123456789101112131415161718192021package com.example.ford.proxy;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;public class TestInvocationHandler implements InvocationHandler&#123; private Subject subject; public TestInvocationHandler(Subject subject)&#123; this.subject = subject; &#125; @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; System.out.println(proxy.getClass()); System.out.println(\"开始执行 \"+method.getName()); Object returnValue = method.invoke(subject,args); System.out.println(\"结束执行 \"+method.getName()); return returnValue; &#125;&#125; 3、测试 12345678910111213141516171819package com.example.ford.proxy;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Proxy;public class TestMain &#123; public static void main(String[] args) &#123; Subject subject = new RealSubject(); InvocationHandler handler = new TestInvocationHandler(subject); Class cls = subject.getClass(); ClassLoader loader = cls.getClassLoader(); Class[] interfaces = cls.getInterfaces(); Subject proxy = (Subject) Proxy.newProxyInstance(loader, interfaces, handler); String returnValue1 = proxy.sayHello(\"changfeng\"); System.out.println(returnValue1); String returnValue2 = proxy.sayGoodBye(); System.out.println(returnValue2); &#125;&#125; 测试结果 12345678class com.sun.proxy.$Proxy0开始执行 sayHello结束执行 sayHellohello changfengclass com.sun.proxy.$Proxy0开始执行 sayGoodBye结束执行 sayGoodBye good bye 原理分析生成代理类类文件： 1234567891011121314151617181920212223242526272829303132333435363738394041424344package com.example.ford.proxy;import sun.misc.ProxyGenerator;import java.io.File;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Proxy;public class JDKProxyTest &#123; public static void main(String[] args)&#123; Subject subject = new RealSubject(); InvocationHandler handler = new TestInvocationHandler(subject); Class cls = subject.getClass(); ClassLoader loader = cls.getClassLoader(); Class[] interfaces = cls.getInterfaces(); Subject proxy = (Subject) Proxy.newProxyInstance(loader, interfaces, handler); createProxyClassFile(); &#125; private static void createProxyClassFile()&#123; String name = \"ProxySubject\"; byte[] data = ProxyGenerator.generateProxyClass(name,new Class[]&#123;Subject.class&#125;); FileOutputStream out =null; try &#123; out = new FileOutputStream(name+\".class\"); System.out.println((new File(\"hello\")).getAbsolutePath()); out.write(data); &#125; catch (FileNotFoundException e) &#123; e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125;finally &#123; if(null!=out) try &#123; out.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125;&#125; 利用jd-gui反编译代理类class文件，可以发现最终生成的代理类继承Proxy类、实现Subject接口,代理类实现了Subject接口的sayHello方法、sayGoodBye方法,在实现Subject接口方法的内部，通过反射调用了InvocationHandlerImpl的invoke方法 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122import com.example.ford.proxy.Subject;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;import java.lang.reflect.Proxy;import java.lang.reflect.UndeclaredThrowableException;public final class ProxySubject extends Proxy implements Subject&#123; private static Method m1; private static Method m3; private static Method m2; private static Method m4; private static Method m0; public ProxySubject(InvocationHandler paramInvocationHandler) &#123; super(paramInvocationHandler); &#125; public final boolean equals(Object paramObject) &#123; try &#123; return ((Boolean)this.h.invoke(this, m1, new Object[] &#123; paramObject &#125;)).booleanValue(); &#125; catch (Error|RuntimeException localError) &#123; throw localError; &#125; catch (Throwable localThrowable) &#123; throw new UndeclaredThrowableException(localThrowable); &#125; &#125; public final String sayHello(String paramString) &#123; try &#123; return (String)this.h.invoke(this, m3, new Object[] &#123; paramString &#125;); &#125; catch (Error|RuntimeException localError) &#123; throw localError; &#125; catch (Throwable localThrowable) &#123; throw new UndeclaredThrowableException(localThrowable); &#125; &#125; public final String toString() &#123; try &#123; return (String)this.h.invoke(this, m2, null); &#125; catch (Error|RuntimeException localError) &#123; throw localError; &#125; catch (Throwable localThrowable) &#123; throw new UndeclaredThrowableException(localThrowable); &#125; &#125; public final String sayGoodBye() &#123; try &#123; return (String)this.h.invoke(this, m4, null); &#125; catch (Error|RuntimeException localError) &#123; throw localError; &#125; catch (Throwable localThrowable) &#123; throw new UndeclaredThrowableException(localThrowable); &#125; &#125; public final int hashCode() &#123; try &#123; return ((Integer)this.h.invoke(this, m0, null)).intValue(); &#125; catch (Error|RuntimeException localError) &#123; throw localError; &#125; catch (Throwable localThrowable) &#123; throw new UndeclaredThrowableException(localThrowable); &#125; &#125; static &#123; try &#123; m1 = Class.forName(\"java.lang.Object\").getMethod(\"equals\", new Class[] &#123; Class.forName(\"java.lang.Object\") &#125;); m3 = Class.forName(\"com.example.ford.proxy.Subject\").getMethod(\"sayHello\", new Class[] &#123; Class.forName(\"java.lang.String\") &#125;); m2 = Class.forName(\"java.lang.Object\").getMethod(\"toString\", new Class[0]); m4 = Class.forName(\"com.example.ford.proxy.Subject\").getMethod(\"sayGoodBye\", new Class[0]); m0 = Class.forName(\"java.lang.Object\").getMethod(\"hashCode\", new Class[0]); return; &#125; catch (NoSuchMethodException localNoSuchMethodException) &#123; throw new NoSuchMethodError(localNoSuchMethodException.getMessage()); &#125; catch (ClassNotFoundException localClassNotFoundException) &#123; throw new NoClassDefFoundError(localClassNotFoundException.getMessage()); &#125; &#125;&#125; 注意:对于从Object中继承的方法，JDK Proxy会把hashCode()、equals()、toString()这三个非接口方法转发给InvocationHandler，其余的Object方法则不会转发 cglib动态代理 cglib动态代理必须实现MethodInterceptor接口 MethodInterceptor接口1234567891011package org.springframework.cglib.proxy;import java.lang.reflect.Method;public interface MethodInterceptor extends Callback &#123; Object intercept(Object var1, Method var2, Object[] var3, MethodProxy var4) throws Throwable; 参数1 代理对象 参数2 方法对象 参数3 方法参数 参数4 方法对应的&#125; 示例12345678910111213141516171819202122232425262728293031323334353637package com.example.ford.proxy;import org.springframework.cglib.proxy.Enhancer;import org.springframework.cglib.proxy.MethodInterceptor;import org.springframework.cglib.proxy.MethodProxy;import java.lang.reflect.Method;public class CglibProxy implements MethodInterceptor&#123; private Enhancer enhancer = new Enhancer(); public Object getProxy(Class cls)&#123; enhancer.setSuperclass(cls); enhancer.setCallback(this); return enhancer.create(); &#125; @Override public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable &#123; System.out.println(o.getClass()); System.out.println(\"开始执行 \"+method.getName()); //我们一般使用proxy.invokeSuper(obj,args)方法。这个很好理解，就是执行原始类的方法。还有一个方法proxy.invoke(obj,args)，这是执行生成子类的方法。 //如果传入的obj就是子类的话，会发生内存溢出，因为子类的方法不停地进入intercept方法，而这个方法又去调用子类的方法，两个方法直接循环调用了。 Object returnValue = methodProxy.invokeSuper(o,objects); //Object returnValue = methodProxy.invoke(o,objects); System.out.println(\"结束执行 \"+method.getName()); return returnValue; &#125; public static void main(String[] args)&#123; CglibProxy cglibProxy = new CglibProxy(); RealSubject realSubject = (RealSubject)cglibProxy.getProxy(RealSubject.class); Object returnValue1 = realSubject.sayHello(\"changfeng\"); System.out.println(returnValue1); Object returnValue2 = realSubject.sayGoodBye(); System.out.println(returnValue2); &#125;&#125; 注意：对于从Object中继承的方法，CGLIB代理也会进行代理，如hashCode()、equals()、toString()等，但是getClass()、wait()等方法不会，因为它是final方法，CGLIB无法代理 注意：既然是继承就不得不考虑final的问题。我们知道final类型不能有子类，所以CGLIB不能代理final类型，遇到这种情况会抛出类似如下异常： java.lang.IllegalArgumentException: Cannot subclass final class cglib.HelloConcrete 注意：同样的，final方法是不能重载的，所以也不能通过CGLIB代理，遇到这种情况不会抛异常，而是会跳过final方法只代理其他方法。 源码分析通过以下方式可以生成代理类class文件System.setProperty(DebuggingClassWriter.DEBUG_LOCATION_PROPERTY, “C:\\\\Code\\\\whywhy\\\\target\\\\classes\\\\zzzzzz”) 用jd-gui反编译代理类package com.example.ford.proxy;import java.lang.reflect.Method;import org.springframework.cglib.proxy.Callback;import org.springframework.cglib.proxy.Factory;import org.springframework.cglib.proxy.MethodInterceptor;import org.springframework.cglib.proxy.MethodProxy;public class RealSubject$$EnhancerByCGLIB$$6a387257 extends RealSubject implements Factory&#123; private boolean CGLIB$BOUND; public static Object CGLIB$FACTORY_DATA; private static final ThreadLocal CGLIB$THREAD_CALLBACKS; private static final Callback[] CGLIB$STATIC_CALLBACKS; private MethodInterceptor CGLIB$CALLBACK_0; private static Object CGLIB$CALLBACK_FILTER; private static final Method CGLIB$sayHello$0$Method; private static final MethodProxy CGLIB$sayHello$0$Proxy; private static final Object[] CGLIB$emptyArgs; private static final Method CGLIB$sayGoodBye$1$Method; private static final MethodProxy CGLIB$sayGoodBye$1$Proxy; private static final Method CGLIB$equals$2$Method; private static final MethodProxy CGLIB$equals$2$Proxy; private static final Method CGLIB$toString$3$Method; private static final MethodProxy CGLIB$toString$3$Proxy; private static final Method CGLIB$hashCode$4$Method; private static final MethodProxy CGLIB$hashCode$4$Proxy; private static final Method CGLIB$clone$5$Method; private static final MethodProxy CGLIB$clone$5$Proxy; /* Error */ static void CGLIB$STATICHOOK1() &#123; // Byte code: // 0: new 22 java/lang/ThreadLocal // 3: dup // 4: invokespecial 25 java/lang/ThreadLocal:&lt;init&gt; ()V // 7: putstatic 27 com/example/ford/proxy/RealSubject$$EnhancerByCGLIB$$6a387257:CGLIB$THREAD_CALLBACKS Ljava/lang/ThreadLocal; // 10: iconst_0 // 11: anewarray 48 java/lang/Object // 14: putstatic 69 com/example/ford/proxy/RealSubject$$EnhancerByCGLIB$$6a387257:CGLIB$emptyArgs [Ljava/lang/Object; // 17: ldc -108 // 19: invokestatic 154 java/lang/Class:forName (Ljava/lang/String;)Ljava/lang/Class; // 22: astore_0 // 23: iconst_4 // 24: anewarray 58 java/lang/String // 27: dup // 28: iconst_0 // 29: ldc -101 // 31: aastore // 32: dup // 33: iconst_1 // 34: ldc -100 // 36: aastore // 37: dup // 38: iconst_2 // 39: ldc -99 // 41: aastore // 42: dup // 43: iconst_3 // 44: ldc -98 // 46: aastore // 47: ldc -96 // 49: invokestatic 154 java/lang/Class:forName (Ljava/lang/String;)Ljava/lang/Class; // 52: dup // 53: astore_1 // 54: invokevirtual 164 java/lang/Class:getDeclaredMethods ()[Ljava/lang/reflect/Method; // 57: invokestatic 170 org/springframework/cglib/core/ReflectUtils:findMethods ([Ljava/lang/String;[Ljava/lang/reflect/Method;)[Ljava/lang/reflect/Method; // 60: dup // 61: iconst_0 // 62: aaload // 63: putstatic 46 com/example/ford/proxy/RealSubject$$EnhancerByCGLIB$$6a387257:CGLIB$sayHello$0$Method Ljava/lang/reflect/Method; // 66: aload_1 // 67: aload_0 // 68: ldc -100 // 70: ldc -101 // 72: ldc -85 // 74: invokestatic 177 org/springframework/cglib/proxy/MethodProxy:create (Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/springframework/cglib/proxy/MethodProxy; // 77: putstatic 50 com/example/ford/proxy/RealSubject$$EnhancerByCGLIB$$6a387257:CGLIB$sayHello$0$Proxy Lorg/springframework/cglib/proxy/MethodProxy; // 80: dup // 81: iconst_1 // 82: aaload // 83: putstatic 67 com/example/ford/proxy/RealSubject$$EnhancerByCGLIB$$6a387257:CGLIB$sayGoodBye$1$Method Ljava/lang/reflect/Method; // 86: aload_1 // 87: aload_0 // 88: ldc -98 // 90: ldc -99 // 92: ldc -78 // 94: invokestatic 177 org/springframework/cglib/proxy/MethodProxy:create (Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/springframework/cglib/proxy/MethodProxy; // 97: putstatic 71 com/example/ford/proxy/RealSubject$$EnhancerByCGLIB$$6a387257:CGLIB$sayGoodBye$1$Proxy Lorg/springframework/cglib/proxy/MethodProxy; // 100: pop // 101: bipush 8 // 103: anewarray 58 java/lang/String // 106: dup // 107: iconst_0 // 108: ldc -77 // 110: aastore // 111: dup // 112: iconst_1 // 113: ldc -76 // 115: aastore // 116: dup // 117: iconst_2 // 118: ldc -75 // 120: aastore // 121: dup // 122: iconst_3 // 123: ldc -98 // 125: aastore // 126: dup // 127: iconst_4 // 128: ldc -74 // 130: aastore // 131: dup // 132: iconst_5 // 133: ldc -73 // 135: aastore // 136: dup // 137: bipush 6 // 139: ldc -72 // 141: aastore // 142: dup // 143: bipush 7 // 145: ldc -71 // 147: aastore // 148: ldc -69 // 150: invokestatic 154 java/lang/Class:forName (Ljava/lang/String;)Ljava/lang/Class; // 153: dup // 154: astore_1 // 155: invokevirtual 164 java/lang/Class:getDeclaredMethods ()[Ljava/lang/reflect/Method; // 158: invokestatic 170 org/springframework/cglib/core/ReflectUtils:findMethods ([Ljava/lang/String;[Ljava/lang/reflect/Method;)[Ljava/lang/reflect/Method; // 161: dup // 162: iconst_0 // 163: aaload // 164: putstatic 80 com/example/ford/proxy/RealSubject$$EnhancerByCGLIB$$6a387257:CGLIB$equals$2$Method Ljava/lang/reflect/Method; // 167: aload_1 // 168: aload_0 // 169: ldc -76 // 171: ldc -77 // 173: ldc -68 // 175: invokestatic 177 org/springframework/cglib/proxy/MethodProxy:create (Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/springframework/cglib/proxy/MethodProxy; // 178: putstatic 82 com/example/ford/proxy/RealSubject$$EnhancerByCGLIB$$6a387257:CGLIB$equals$2$Proxy Lorg/springframework/cglib/proxy/MethodProxy; // 181: dup // 182: iconst_1 // 183: aaload // 184: putstatic 96 com/example/ford/proxy/RealSubject$$EnhancerByCGLIB$$6a387257:CGLIB$toString$3$Method Ljava/lang/reflect/Method; // 187: aload_1 // 188: aload_0 // 189: ldc -98 // 191: ldc -75 // 193: ldc -67 // 195: invokestatic 177 org/springframework/cglib/proxy/MethodProxy:create (Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/springframework/cglib/proxy/MethodProxy; // 198: putstatic 98 com/example/ford/proxy/RealSubject$$EnhancerByCGLIB$$6a387257:CGLIB$toString$3$Proxy Lorg/springframework/cglib/proxy/MethodProxy; // 201: dup // 202: iconst_2 // 203: aaload // 204: putstatic 107 com/example/ford/proxy/RealSubject$$EnhancerByCGLIB$$6a387257:CGLIB$hashCode$4$Method Ljava/lang/reflect/Method; // 207: aload_1 // 208: aload_0 // 209: ldc -73 // 211: ldc -74 // 213: ldc -66 // 215: invokestatic 177 org/springframework/cglib/proxy/MethodProxy:create (Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/springframework/cglib/proxy/MethodProxy; // 218: putstatic 109 com/example/ford/proxy/RealSubject$$EnhancerByCGLIB$$6a387257:CGLIB$hashCode$4$Proxy Lorg/springframework/cglib/proxy/MethodProxy; // 221: dup // 222: iconst_3 // 223: aaload // 224: putstatic 125 com/example/ford/proxy/RealSubject$$EnhancerByCGLIB$$6a387257:CGLIB$clone$5$Method Ljava/lang/reflect/Method; // 227: aload_1 // 228: aload_0 // 229: ldc -71 // 231: ldc -72 // 233: ldc -65 // 235: invokestatic 177 org/springframework/cglib/proxy/MethodProxy:create (Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lorg/springframework/cglib/proxy/MethodProxy; // 238: putstatic 127 com/example/ford/proxy/RealSubject$$EnhancerByCGLIB$$6a387257:CGLIB$clone$5$Proxy Lorg/springframework/cglib/proxy/MethodProxy; // 241: pop // 242: return // 243: athrow &#125; final String CGLIB$sayHello$0(String paramString) &#123; return super.sayHello(paramString); &#125; public final String sayHello(String paramString) &#123; MethodInterceptor tmp4_1 = this.CGLIB$CALLBACK_0; if (tmp4_1 == null) &#123; tmp4_1; CGLIB$BIND_CALLBACKS(this); &#125; MethodInterceptor tmp17_14 = this.CGLIB$CALLBACK_0; if (tmp17_14 != null) &#123; return (String)tmp17_14.intercept(this, CGLIB$sayHello$0$Method, new Object[] &#123; paramString &#125;, CGLIB$sayHello$0$Proxy); &#125; return super.sayHello(paramString); &#125; final String CGLIB$sayGoodBye$1() &#123; return super.sayGoodBye(); &#125; public final String sayGoodBye() &#123; MethodInterceptor tmp4_1 = this.CGLIB$CALLBACK_0; if (tmp4_1 == null) &#123; tmp4_1; CGLIB$BIND_CALLBACKS(this); &#125; MethodInterceptor tmp17_14 = this.CGLIB$CALLBACK_0; if (tmp17_14 != null) &#123; return (String)tmp17_14.intercept(this, CGLIB$sayGoodBye$1$Method, CGLIB$emptyArgs, CGLIB$sayGoodBye$1$Proxy); &#125; return super.sayGoodBye(); &#125; final boolean CGLIB$equals$2(Object paramObject) &#123; return super.equals(paramObject); &#125; public final boolean equals(Object paramObject) &#123; MethodInterceptor tmp4_1 = this.CGLIB$CALLBACK_0; if (tmp4_1 == null) &#123; tmp4_1; CGLIB$BIND_CALLBACKS(this); &#125; MethodInterceptor tmp17_14 = this.CGLIB$CALLBACK_0; if (tmp17_14 != null) &#123; Object tmp41_36 = tmp17_14.intercept(this, CGLIB$equals$2$Method, new Object[] &#123; paramObject &#125;, CGLIB$equals$2$Proxy); tmp41_36; return tmp41_36 == null ? false : ((Boolean)tmp41_36).booleanValue(); &#125; return super.equals(paramObject); &#125; final String CGLIB$toString$3() &#123; return super.toString(); &#125; public final String toString() &#123; MethodInterceptor tmp4_1 = this.CGLIB$CALLBACK_0; if (tmp4_1 == null) &#123; tmp4_1; CGLIB$BIND_CALLBACKS(this); &#125; MethodInterceptor tmp17_14 = this.CGLIB$CALLBACK_0; if (tmp17_14 != null) &#123; return (String)tmp17_14.intercept(this, CGLIB$toString$3$Method, CGLIB$emptyArgs, CGLIB$toString$3$Proxy); &#125; return super.toString(); &#125; final int CGLIB$hashCode$4() &#123; return super.hashCode(); &#125; public final int hashCode() &#123; MethodInterceptor tmp4_1 = this.CGLIB$CALLBACK_0; if (tmp4_1 == null) &#123; tmp4_1; CGLIB$BIND_CALLBACKS(this); &#125; MethodInterceptor tmp17_14 = this.CGLIB$CALLBACK_0; if (tmp17_14 != null) &#123; Object tmp36_31 = tmp17_14.intercept(this, CGLIB$hashCode$4$Method, CGLIB$emptyArgs, CGLIB$hashCode$4$Proxy); tmp36_31; return tmp36_31 == null ? 0 : ((Number)tmp36_31).intValue(); &#125; return super.hashCode(); &#125; final Object CGLIB$clone$5() throws CloneNotSupportedException &#123; return super.clone(); &#125; protected final Object clone() throws CloneNotSupportedException &#123; MethodInterceptor tmp4_1 = this.CGLIB$CALLBACK_0; if (tmp4_1 == null) &#123; tmp4_1; CGLIB$BIND_CALLBACKS(this); &#125; MethodInterceptor tmp17_14 = this.CGLIB$CALLBACK_0; if (tmp17_14 != null) &#123; return tmp17_14.intercept(this, CGLIB$clone$5$Method, CGLIB$emptyArgs, CGLIB$clone$5$Proxy); &#125; return super.clone(); &#125; /* Error */ public static MethodProxy CGLIB$findMethodProxy(org.springframework.cglib.core.Signature arg0) &#123; // Byte code: // 0: aload_0 // 1: invokevirtual 130 java/lang/Object:toString ()Ljava/lang/String; // 4: dup // 5: invokevirtual 131 java/lang/Object:hashCode ()I // 8: lookupswitch default:+132-&gt;140, -1816210712:+60-&gt;68, -508378822:+72-&gt;80, 1577955665:+84-&gt;92, 1826985398:+96-&gt;104, 1913648695:+108-&gt;116, 1984935277:+120-&gt;128 // 68: ldc -123 // 70: invokevirtual 134 java/lang/Object:equals (Ljava/lang/Object;)Z // 73: ifeq +68 -&gt; 141 // 76: getstatic 50 com/example/ford/proxy/RealSubject$$EnhancerByCGLIB$$6a387257:CGLIB$sayHello$0$Proxy Lorg/springframework/cglib/proxy/MethodProxy; // 79: areturn // 80: ldc -120 // 82: invokevirtual 134 java/lang/Object:equals (Ljava/lang/Object;)Z // 85: ifeq +56 -&gt; 141 // 88: getstatic 127 com/example/ford/proxy/RealSubject$$EnhancerByCGLIB$$6a387257:CGLIB$clone$5$Proxy Lorg/springframework/cglib/proxy/MethodProxy; // 91: areturn // 92: ldc -118 // 94: invokevirtual 134 java/lang/Object:equals (Ljava/lang/Object;)Z // 97: ifeq +44 -&gt; 141 // 100: getstatic 71 com/example/ford/proxy/RealSubject$$EnhancerByCGLIB$$6a387257:CGLIB$sayGoodBye$1$Proxy Lorg/springframework/cglib/proxy/MethodProxy; // 103: areturn // 104: ldc -116 // 106: invokevirtual 134 java/lang/Object:equals (Ljava/lang/Object;)Z // 109: ifeq +32 -&gt; 141 // 112: getstatic 82 com/example/ford/proxy/RealSubject$$EnhancerByCGLIB$$6a387257:CGLIB$equals$2$Proxy Lorg/springframework/cglib/proxy/MethodProxy; // 115: areturn // 116: ldc -114 // 118: invokevirtual 134 java/lang/Object:equals (Ljava/lang/Object;)Z // 121: ifeq +20 -&gt; 141 // 124: getstatic 98 com/example/ford/proxy/RealSubject$$EnhancerByCGLIB$$6a387257:CGLIB$toString$3$Proxy Lorg/springframework/cglib/proxy/MethodProxy; // 127: areturn // 128: ldc -112 // 130: invokevirtual 134 java/lang/Object:equals (Ljava/lang/Object;)Z // 133: ifeq +8 -&gt; 141 // 136: getstatic 109 com/example/ford/proxy/RealSubject$$EnhancerByCGLIB$$6a387257:CGLIB$hashCode$4$Proxy Lorg/springframework/cglib/proxy/MethodProxy; // 139: areturn // 140: pop // 141: aconst_null // 142: areturn &#125; public RealSubject$$EnhancerByCGLIB$$6a387257() &#123; CGLIB$BIND_CALLBACKS(this); &#125; public static void CGLIB$SET_THREAD_CALLBACKS(Callback[] paramArrayOfCallback) &#123; CGLIB$THREAD_CALLBACKS.set(paramArrayOfCallback); &#125; public static void CGLIB$SET_STATIC_CALLBACKS(Callback[] paramArrayOfCallback) &#123; CGLIB$STATIC_CALLBACKS = paramArrayOfCallback; &#125; private static final void CGLIB$BIND_CALLBACKS(Object paramObject) &#123; 6a387257 local6a387257 = (6a387257)paramObject; if (!local6a387257.CGLIB$BOUND) &#123; local6a387257.CGLIB$BOUND = true; Object tmp23_20 = CGLIB$THREAD_CALLBACKS.get(); if (tmp23_20 == null) &#123; tmp23_20; CGLIB$STATIC_CALLBACKS; &#125; local6a387257.CGLIB$CALLBACK_0 = (tmp31_28 == null ? tmp31_28 : (MethodInterceptor)((Callback[])tmp23_20)[0]); &#125; &#125; public Object newInstance(Callback[] paramArrayOfCallback) &#123; CGLIB$SET_THREAD_CALLBACKS(paramArrayOfCallback); CGLIB$SET_THREAD_CALLBACKS(null); return new 6a387257(); &#125; public Object newInstance(Callback paramCallback) &#123; CGLIB$SET_THREAD_CALLBACKS(new Callback[] &#123; paramCallback &#125;); CGLIB$SET_THREAD_CALLBACKS(null); return new 6a387257(); &#125; /* Error */ public Object newInstance(Class[] arg1, Object[] arg2, Callback[] arg3) &#123; // Byte code: // 0: aload_3 // 1: invokestatic 210 com/example/ford/proxy/RealSubject$$EnhancerByCGLIB$$6a387257:CGLIB$SET_THREAD_CALLBACKS ([Lorg/springframework/cglib/proxy/Callback;)V // 4: new 2 com/example/ford/proxy/RealSubject$$EnhancerByCGLIB$$6a387257 // 7: dup // 8: aload_1 // 9: dup // 10: arraylength // 11: tableswitch default:+24-&gt;35, 0:+17-&gt;28 // 28: pop // 29: invokespecial 211 com/example/ford/proxy/RealSubject$$EnhancerByCGLIB$$6a387257:&lt;init&gt; ()V // 32: goto +17 -&gt; 49 // 35: goto +3 -&gt; 38 // 38: pop // 39: new 217 java/lang/IllegalArgumentException // 42: dup // 43: ldc -37 // 45: invokespecial 222 java/lang/IllegalArgumentException:&lt;init&gt; (Ljava/lang/String;)V // 48: athrow // 49: aconst_null // 50: invokestatic 210 com/example/ford/proxy/RealSubject$$EnhancerByCGLIB$$6a387257:CGLIB$SET_THREAD_CALLBACKS ([Lorg/springframework/cglib/proxy/Callback;)V // 53: areturn &#125; public Callback getCallback(int paramInt) &#123; CGLIB$BIND_CALLBACKS(this); switch (paramInt) &#123; case 0: break; &#125; return null; &#125; public void setCallback(int paramInt, Callback paramCallback) &#123; switch (paramInt) &#123; case 0: this.CGLIB$CALLBACK_0 = ((MethodInterceptor)paramCallback); break; &#125; &#125; public Callback[] getCallbacks() &#123; CGLIB$BIND_CALLBACKS(this); return new Callback[] &#123; this.CGLIB$CALLBACK_0 &#125;; &#125; public void setCallbacks(Callback[] paramArrayOfCallback) &#123; this.CGLIB$CALLBACK_0 = ((MethodInterceptor)paramArrayOfCallback[0]); &#125; static &#123;&#125;&#125; 每个被代理的方法都对应一个MethodProxy对象，methodProxy.invokeSuper方法最终调用委托类的add方法 123456789public Object invokeSuper(Object obj, Object[] args) throws Throwable &#123; try &#123; init(); FastClassInfo fci = fastClassInfo; return fci.f2.invoke(fci.i2, obj, args); &#125; catch (InvocationTargetException e) &#123; throw e.getTargetException(); &#125;&#125; 单看invokeSuper方法的实现，似乎看不出委托类add方法调用，在MethodProxy实现中，通过FastClassInfo维护了委托类和代理类的FastClass。 123456private static class FastClassInfo &#123; FastClass f1; FastClass f2; int i1; int i2;&#125; 以sayHello方法的methodProxy为例，f1指向委托类对象，f2指向代理类对象，i1和i2分别是方法sayHello和CGLIB$sayHello$0在对象中索引位置。 FastClass实现机制FastClass其实就是对Class对象进行特殊处理，提出下标概念index，通过索引保存方法的引用信息，将原先的反射调用，转化为方法的直接调用，从而体现所谓的fast，下面通过一个例子了解一下FastClass的实现机制。 1、定义原类 123456789class Test &#123; public void f()&#123; System.out.println(\"f method\"); &#125; public void g()&#123; System.out.println(\"g method\"); &#125;&#125; 2、定义Fast类 123456789101112131415161718192021222324class FastTest &#123; public int getIndex(String signature)&#123; switch(signature.hashCode())&#123; case 3078479: return 1; case 3108270: return 2; &#125; return -1; &#125; public Object invoke(int index, Object o, Object[] ol)&#123; Test t = (Test) o; switch(index)&#123; case 1: t.f(); return null; case 2: t.g(); return null; &#125; return null; &#125;&#125; 在FastTest中有两个方法，getIndex中对Test类的每个方法根据hash建立索引，invoke根据指定的索引，直接调用目标方法，避免了反射调用。所以当调用methodProxy.invokeSuper方法时，实际上是调用代理类的CGLIB$sayHello$0方法，CGLIB$sayHello$0直接调用了委托类的sayHello方法","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-02-07T16:25:49.000Z","updated":"2018-02-07T16:25:49.000Z","comments":true,"path":"2018/02/08/hello-world/","link":"","permalink":"https://killgc.github.io/shortfeng/2018/02/08/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}